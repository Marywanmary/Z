name: ipq60xx-ChatZ

on:
  workflow_dispatch:
    inputs:
      chipset:
        description: '芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options:
        - ipq60xx
        - ipq80xx
        - mtk
      ubuntu_version:
        description: 'Ubuntu版本'
        required: true
        default: '22.04'
        type: choice
        options:
        - 22.04
        - 24.04

env:
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 设置编译矩阵
        id: set-matrix
        run: |
          # 生成正确的矩阵JSON格式，将Ultra配置排在前面
          matrix=$(jq -c -n '
            {
              "include": [
                {"branch": "immwrt", "config": "Ultra"},
                {"branch": "openwrt", "config": "Ultra"},
                {"branch": "libwrt", "config": "Ultra"},
                {"branch": "immwrt", "config": "Max"},
                {"branch": "openwrt", "config": "Max"},
                {"branch": "libwrt", "config": "Max"},
                {"branch": "immwrt", "config": "Pro"},
                {"branch": "openwrt", "config": "Pro"},
                {"branch": "libwrt", "config": "Pro"}
              ]
            }')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-${{ github.event.inputs.ubuntu_version }}
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false
      max-parallel: 3
    env:
      REPO_SHORT: ${{ matrix.branch }}
      CONFIG_TYPE: ${{ matrix.config }}
      CHIPSET: ${{ github.event.inputs.chipset }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化环境
        run: |
          echo -e "\033[1;36m======= 初始化编译环境 =======\033[0m"
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget time ccache

      - name: 恢复工具链缓存
        id: restore-toolchain-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            build_dir/toolchain-*
          key: ${{ env.CHIPSET }}-toolchain-${{ hashFiles('configs/*.config') }}
          restore-keys: |
            ${{ env.CHIPSET }}-toolchain-

      - name: 显示工具链缓存信息
        if: steps.restore-toolchain-cache.outputs.cache-hit == 'true'
        run: |
          echo -e "\033[1;32m======= 工具链缓存命中 =======\033[0m"
          echo "缓存大小: $(du -sh ~/.ccache | cut -f1)"
          echo "缓存文件数量: $(find ~/.ccache -type f | wc -l)"

      - name: 恢复依赖包缓存
        id: restore-deps-cache
        uses: actions/cache@v4
        with:
          path: |
            dl
            feeds
          key: ${{ env.CHIPSET }}-${{ env.REPO_SHORT }}-deps-${{ hashFiles('configs/*.config') }}
          restore-keys: |
            ${{ env.CHIPSET }}-${{ env.REPO_SHORT }}-deps-
            ${{ env.CHIPSET }}-deps-

      - name: 显示依赖包缓存信息
        if: steps.restore-deps-cache.outputs.cache-hit == 'true'
        run: |
          echo -e "\033[1;32m======= 依赖包缓存命中 =======\033[0m"
          echo "缓存大小: $(du -sh dl feeds 2>/dev/null | awk '{sum+=$1} END {print sum}' | numfmt --to=iec)"
          echo "缓存文件数量: $(find dl feeds -type f 2>/dev/null | wc -l)"

      - name: 合并配置文件
        run: |
          echo -e "\033[1;36m======= 合并配置文件 =======\033[0m"
          mkdir -p config_temp
          
          # 检查基础配置文件是否存在
          if [ ! -f "configs/${{ env.CHIPSET }}_base.config" ]; then
            echo "错误: 找不到芯片配置文件 configs/${{ env.CHIPSET }}_base.config"
            exit 1
          fi
          
          if [ ! -f "configs/${{ env.REPO_SHORT }}_base.config" ]; then
            echo "错误: 找不到仓库配置文件 configs/${{ env.REPO_SHORT }}_base.config"
            exit 1
          fi
          
          if [ ! -f "configs/${{ env.CONFIG_TYPE }}.config" ]; then
            echo "错误: 找不到配置类型文件 configs/${{ env.CONFIG_TYPE }}.config"
            exit 1
          fi
          
          # 合并配置文件
          echo "# 合并的配置文件 - 由GitHub Actions自动生成" > config_temp/merged.config
          echo "# 芯片架构: ${{ env.CHIPSET }}" >> config_temp/merged.config
          echo "# 仓库类型: ${{ env.REPO_SHORT }}" >> config_temp/merged.config
          echo "# 配置类型: ${{ env.CONFIG_TYPE }}" >> config_temp/merged.config
          echo "# 生成时间: $(date +'%Y-%m-%d %H:%M:%S')" >> config_temp/merged.config
          echo "" >> config_temp/merged.config
          
          # 添加芯片基础配置
          echo "# === 芯片基础配置 ===" >> config_temp/merged.config
          cat configs/${{ env.CHIPSET }}_base.config | grep -v "^#" | grep -v "^$" >> config_temp/merged.config
          echo "" >> config_temp/merged.config
          
          # 添加仓库基础配置
          echo "# === 仓库基础配置 ===" >> config_temp/merged.config
          cat configs/${{ env.REPO_SHORT }}_base.config | grep -v "^#" | grep -v "^$" >> config_temp/merged.config
          echo "" >> config_temp/merged.config
          
          # 添加配置类型
          echo "# === 配置类型 ===" >> config_temp/merged.config
          cat configs/${{ env.CONFIG_TYPE }}.config | grep -v "^#" | grep -v "^$" >> config_temp/merged.config
          
          # 修复frp包路径问题
          if grep -q 'CONFIG_PACKAGE_frp' config_temp/merged.config; then
            echo -e "\033[1;33m======= 修复frp包路径 =======\033[0m"
            sed -i 's|feeds/packa/fr/net/frp|feeds/packages/net/frp|g' config_temp/merged.config
          fi

          # 清理配置文件
          echo -e "\033[1;33m======= 最终清理配置文件 =======\033[0m"
          # 移除所有注释行
          sed -i '/^#/d' config_temp/merged.config
          # 移除空行
          sed -i '/^$/d' config_temp/merged.config
          # 确保所有配置行格式正确
          # sed -i '/^CONFIG_[A-Za-z0-9_]*=[ynm]$/!d' config_temp/merged.config
          # sed -i '/^CONFIG_[A-Za-z0-9_]*="[^"]*"$/!d' config_temp/merged.config
          
          # 显示合并后的配置文件前300行
          echo -e "\033[1;36m======= 合并后的配置文件前300行 =======\033[0m"
          head -n 300 config_temp/merged.config
          
          # 提取设备名称并转换为逗号分隔的单行
          devices=$(grep -oP 'CONFIG_TARGET_DEVICE_.*?_DEVICE_\K[^=]+' config_temp/merged.config | sort -u | tr '\n' ',' | sed 's/,$//')
          echo "DEVICES=${devices}" >> $GITHUB_ENV
          echo "编译设备: ${devices//,/ }"

      - name: 克隆源码
        run: |
          echo -e "\033[1;36m======= 克隆源码 =======\033[0m"
          case ${{ env.REPO_SHORT }} in
            immwrt)
              REPO_URL="https://github.com/laipeng668/immortalwrt.git"
              REPO_BRANCH="master"
              ;;
            openwrt)
              REPO_URL="https://github.com/laipeng668/openwrt.git"
              REPO_BRANCH="master"
              ;;
            libwrt)
              REPO_URL="https://github.com/laipeng668/openwrt-6.x.git"
              REPO_BRANCH="k6.12-nss"
              ;;
          esac
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

      - name: 更新feeds
        run: |
          echo -e "\033[1;36m======= 更新feeds =======\033[0m"
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 应用配置文件
        run: |
          echo -e "\033[1;36m======= 应用配置文件 =======\033[0m"
          cp config_temp/merged.config openwrt/.config
          cd openwrt
          
          # 使用make oldconfig自动清理配置文件
          #echo -e "\033[1;36m======= 使用make oldconfig清理配置文件 =======\033[0m"
          #yes '' | make oldconfig

          # 验证配置文件格式
          echo -e "\033[1;36m======= 验证配置文件 =======\033[0m"
          if ! make defconfig > /dev/null 2>&1; then
            echo -e "\033[1;31m======= 配置文件验证失败 =======\033[0m"
            # 显示配置文件中可能的问题行
            echo "可能的问题行:"
            grep -n "^CONFIG_.*[^=]$" .config || true
            grep -n "^CONFIG_.*=$" .config || true
            grep -n "^CONFIG_.*=+\"\"$" .config || true
            grep -n "^CONFIG_.*=\"\"$" .config || true
            grep -n "^#" .config || true
            exit 1
          fi
          echo "配置文件验证成功"

      - name: 执行编译
        run: |
          echo -e "\033[1;36m======= 开始编译 =======\033[0m"
          chmod +x scripts/*.sh
          ./scripts/build.sh 2>&1 | tee build.log
          
          # 检查编译状态
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo -e "\033[1;31m======= 编译失败 =======\033[0m"
            tail -n 1000 build.log > error.log
            exit 1
          fi

      - name: 保存工具链缓存
        id: save-toolchain-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            build_dir/toolchain-*
          key: ${{ env.CHIPSET }}-toolchain-${{ hashFiles('configs/*.config') }}

      - name: 显示工具链缓存保存信息
        if: steps.save-toolchain-cache.outputs.cache-hit != 'true'
        run: |
          echo -e "\033[1;32m======= 工具链缓存已保存 =======\033[0m"
          echo "缓存大小: $(du -sh ~/.ccache | cut -f1)"
          echo "缓存文件数量: $(find ~/.ccache -type f | wc -l)"

      - name: 保存依赖包缓存
        id: save-deps-cache
        uses: actions/cache@v4
        with:
          path: |
            dl
            feeds
          key: ${{ env.CHIPSET }}-${{ env.REPO_SHORT }}-deps-${{ hashFiles('configs/*.config') }}

      - name: 显示依赖包缓存保存信息
        if: steps.save-deps-cache.outputs.cache-hit != 'true'
        run: |
          echo -e "\033[1;32m======= 依赖包缓存已保存 =======\033[0m"
          echo "缓存大小: $(du -sh dl feeds 2>/dev/null | awk '{sum+=$1} END {print sum}' | numfmt --to=iec)"
          echo "缓存文件数量: $(find dl feeds -type f 2>/dev/null | wc -l)

      - name: 准备产出物
        run: |
          echo -e "\033[1;36m======= 准备产出物 =======\033[0m"
          mkdir -p artifacts
          cp -r output/* artifacts/ || true
          tar -czf artifacts/${{ env.CHIPSET }}-config.tar.gz -C output/configs .
          tar -czf artifacts/${{ env.CHIPSET }}-log.tar.gz -C output/logs .
          tar -czf artifacts/${{ env.CHIPSET }}-app.tar.gz -C output/packages .

      - name: 上传产出物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ env.CONFIG_TYPE }}-${{ env.CHIPSET }}
          path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-${{ github.event.inputs.ubuntu_version }}
    if: always()
    env:
      CHIPSET: ${{ github.event.inputs.chipset }}
    permissions:
      contents: write
    
    steps:
      - name: 下载所有产出物
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts

      - name: 生成日期标签
        id: generate-date
        run: |
          echo "date_tag=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: 准备发布
        run: |
          echo -e "\033[1;36m======= 准备发布 =======\033[0m"
          mkdir -p release
          
          # 遍历所有artifacts并复制文件
          for artifact_dir in all_artifacts/*; do
            if [ -d "$artifact_dir" ]; then
              echo "处理artifact: $(basename "$artifact_dir")"
              cp -r "$artifact_dir"/* release/ 2>/dev/null || true
            fi
          done
          
          # 检查release目录是否为空
          if [ ! "$(ls -A release)" ]; then
            echo "警告: release目录为空，创建一个README文件"
            echo "# 编译产物" > release/README.md
            echo "本次编译没有生成任何产物" >> release/README.md
          fi
          
          # 生成发布说明
          cat > release_notes.md << EOF
          ## 默认信息
          - 管理地址: 192.168.111.1
          - 默认用户: root
          - 默认密码: none
          - WIFI密码: 12345678
          
          ## 固件信息
          - 芯片架构: ${{ env.CHIPSET }}
          - 设备型号: 京东云亚瑟、雅典娜
          - 内核版本: $(find release -name "*.config" | head -1 | xargs grep -oP 'CONFIG_KERNEL_VERSION="\K[^"]+' | head -1)
          - 作者: Mary
          - 发布时间: $(date +'%Y-%m-%d %H:%M:%S')
          
          ## luci-app列表
          $(find release -name "*.config" | head -1 | xargs grep 'CONFIG_PACKAGE_luci-app-' | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
          EOF

      - name: 创建发布
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.generate-date.outputs.date_tag }}-${{ env.CHIPSET }}
          name: ${{ env.CHIPSET }} 固件发布
          body_path: release_notes.md
          files: release/**
