name: Core Build Workflow

on:
  workflow_call:
    inputs:
      repo_url:
        required: true
        type: string
      repo_branch:
        required: true
        type: string
      repo_short:
        required: true
        type: string
      soc_name:
        required: true
        type: string
      config_profile:
        required: true
        type: string
      ubuntu_version:
        required: false
        type: string
        default: 'ubuntu-22.04'
      manual_trigger:
        required: false
        type: boolean
        default: false

jobs:
  # Á¨¨‰∏ÄÈò∂ÊÆµÔºöÁéØÂ¢ÉÂáÜÂ§áÂíåÁºìÂ≠ò
  prepare:
    runs-on: ${{ inputs.ubuntu_version }}
    outputs:
      cache_key: ${{ steps.cache_key.outputs.key }}
      cache_hit: ${{ steps.cache.outputs.cache-hit }}
      feeds_hash: ${{ steps.feeds_hash.outputs.hash }}
      config_hash: ${{ steps.config_hash.outputs.hash }}
      
    steps:
      - name: üöÄ ÂàùÂßãÂåñÁéØÂ¢É
        uses: actions/checkout@v4
        
      - name: üíæ ËÆæÁΩÆÁ£ÅÁõòÁ©∫Èó¥
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: üìä ÊòæÁ§∫ÂàùÂßãÁ£ÅÁõòÁ©∫Èó¥
        run: |
          echo "üîç ÂàùÂßãÁ£ÅÁõòÁ©∫Èó¥:"
          df -h

      - name: üîß ËÆæÁΩÆÁºñËØëÁéØÂ¢É
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-distutils python3-setuptools python3-pyelftools rsync \
          unzip zlib1g-dev file wget curl ccache ecj fastjar java-propose-classpath \
          libelf-dev intltool libncurses5-dev libncursesw5-dev libssl-dev \
          python3-pyelftools subversion swig time xsltproc zlib1g-dev \
          libxml-parser-perl libgtk2.0-dev libglib2.0-dev libglade2-0-dev \
          libglade2-dev libqt5-dev python3-dev libusb-1.0-0-dev libudev-dev

      - name: üîç ÁîüÊàêÈÖçÁΩÆÂìàÂ∏å
        id: config_hash
        run: |
          # ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂ÁöÑÂìàÂ∏åÂÄº
          CONFIG_HASH=$(find configs/ -type f -name "*.config" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$CONFIG_HASH" >> $GITHUB_OUTPUT
          echo "üîë ÈÖçÁΩÆÊñá‰ª∂ÂìàÂ∏å: $CONFIG_HASH"

      - name: üîç ÁîüÊàêFeedsÂìàÂ∏å
        id: feeds_hash
        run: |
          # ÁîüÊàêfeedsÈÖçÁΩÆÁöÑÂìàÂ∏åÂÄº
          FEEDS_HASH=$(cat feeds.conf.default 2>/dev/null || echo "default" | sha256sum | cut -d' ' -f1)
          echo "hash=$FEEDS_HASH" >> $GITHUB_OUTPUT
          echo "üîë FeedsÈÖçÁΩÆÂìàÂ∏å: $FEEDS_HASH"

      - name: üîç ÁîüÊàêÁºìÂ≠òÈîÆ
        id: cache_key
        run: |
          # ÁîüÊàêÂ§öÁ∫ßÁºìÂ≠òÈîÆ
          CACHE_KEY="${{ inputs.repo_short }}-${{ inputs.soc_name }}-${{ inputs.config_profile }}-${{ steps.config_hash.outputs.hash }}-${{ steps.feeds_hash.outputs.hash }}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "üîë ÁºìÂ≠òÈîÆ: $CACHE_KEY"

      - name: üì¶ ËÆæÁΩÆÂ§öÁ∫ßÁºìÂ≠ò
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            .ccache
            dl
            build_dir
            staging_dir
            feeds
            toolchain
          key: ${{ steps.cache_key.outputs.key }}
          restore-keys: |
            ${{ inputs.repo_short }}-${{ inputs.soc_name }}-${{ inputs.config_profile }}-
            ${{ inputs.repo_short }}-${{ inputs.soc_name }}-
            ${{ inputs.repo_short }}-

      - name: üì• ÂÖãÈöÜÊ∫êÁ†Å
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone ${{ inputs.repo_url }} openwrt
          cd openwrt
          git checkout ${{ inputs.repo_branch }}
          git log -1 --pretty=format:"%h - %s (%cr)"

      - name: üì¶ Êõ¥Êñ∞Feeds
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

  # Á¨¨‰∫åÈò∂ÊÆµÔºöÈÖçÁΩÆÂêàÂπ∂ÂíåÊ£ÄÊü•
  config:
    runs-on: ${{ inputs.ubuntu_version }}
    needs: prepare
    outputs:
      config_valid: ${{ steps.config_check.outputs.valid }}
      missing_packages: ${{ steps.config_check.outputs.missing }}
      auto_fixed: ${{ steps.config_check.outputs.fixed }}
      luci_packages: ${{ steps.package_info.outputs.packages }}
      
    steps:
      - name: üöÄ ÂàùÂßãÂåñÁéØÂ¢É
        uses: actions/checkout@v4

      - name: üì¶ ÊÅ¢Â§çÁºìÂ≠ò
        uses: actions/cache@v4
        with:
          path: |
            .ccache
            dl
            build_dir
            staging_dir
            feeds
            toolchain
          key: ${{ needs.prepare.outputs.cache_key }}

      - name: üîÄ ÂêàÂπ∂ÈÖçÁΩÆÊñá‰ª∂
        run: |
          chmod +x scripts/merge_config.sh
          ./scripts/merge_config.sh ${{ inputs.repo_short }} ${{ inputs.soc_name }} ${{ inputs.config_profile }}

      - name: üîç ÂàùÂßãÂåÖÊ£ÄÊü•
        id: initial_check
        run: |
          chmod +x scripts/check_packages.sh
          ./scripts/check_packages.sh initial

      - name: üõ†Ô∏è ÊâßË°åDIYËÑöÊú¨
        run: |
          cd openwrt
          chmod +x ../scripts/diy.sh
          ../scripts/diy.sh ${{ inputs.repo_short }} ${{ inputs.soc_name }}

      - name: üì¶ Êõ¥Êñ∞Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: üéØ ÁîüÊàêÊúÄÁªàÈÖçÁΩÆ
        run: |
          cd openwrt
          make defconfig

      - name: üîç ÊúÄÁªàÂåÖÊ£ÄÊü•
        id: final_check
        run: |
          chmod +x scripts/check_packages.sh
          ./scripts/check_packages.sh final

      - name: üì¶ Ëé∑ÂèñÂåÖ‰ø°ÊÅØ
        id: package_info
        run: |
          LUCI_PACKAGES=$(grep "CONFIG_PACKAGE_luci-app-.*=y" openwrt/.config | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/' | tr '\n' ',')
          echo "packages=$LUCI_PACKAGES" >> $GITHUB_OUTPUT
          echo "üì¶ LUCIÂåÖÊï∞Èáè: $(echo $LUCI_PACKAGES | tr ',' '\n' | wc -l)"

      - name: üîç ÈÖçÁΩÆÈ™åËØÅ
        id: config_check
        run: |
          # Ê£ÄÊü•ÈÖçÁΩÆÊòØÂê¶ÊúâÊïà
          if [ -f "openwrt/.config" ]; then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "missing=true" >> $GITHUB_OUTPUT
          fi

      - name: üîß Â∞ùËØïËá™Âä®‰øÆÂ§ç
        if: steps.config_check.outputs.valid == 'false'
        run: |
          chmod +x scripts/auto_fix_packages.sh
          ./scripts/auto_fix_packages.sh ${{ inputs.repo_short }} ${{ inputs.soc_name }} ${{ inputs.config_profile }}

      - name: üîç ‰øÆÂ§çÂêéÈ™åËØÅ
        if: steps.config_check.outputs.valid == 'false'
        run: |
          cd openwrt
          make defconfig
          chmod +x ../scripts/check_packages.sh
          ../scripts/check_packages.sh final

      - name: ‚ùå ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•
        if: steps.config_check.outputs.valid == 'false'
        run: |
          echo -e "\033[31müö® ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•ÔºåÊó†Ê≥ïËá™Âä®‰øÆÂ§çÔºÅ\033[0m"
          echo -e "\033[31mËØ∑Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂Âíå‰æùËµñÂÖ≥Á≥ªÔºÅ\033[0m"
          exit 1

  # Á¨¨‰∏âÈò∂ÊÆµÔºöÁºñËØë
  build:
    runs-on: ${{ inputs.ubuntu_version }}
    needs: [prepare, config]
    if: needs.config.outputs.config_valid == 'true'
    
    steps:
      - name: üöÄ ÂàùÂßãÂåñÁéØÂ¢É
        uses: actions/checkout@v4

      - name: üì¶ ÊÅ¢Â§çÁºìÂ≠ò
        uses: actions/cache@v4
        with:
          path: |
            .ccache
            dl
            build_dir
            staging_dir
            feeds
            toolchain
          key: ${{ needs.prepare.outputs.cache_key }}

      - name: üèóÔ∏è ÁºñËØëÂõ∫‰ª∂
        run: |
          cd openwrt
          echo -e "\033[36müî® ÂºÄÂßãÁºñËØëÂõ∫‰ª∂...\033[0m"
          echo -e "\033[36müî® ‰ΩøÁî® $(nproc) ‰∏™Á∫øÁ®ãÁºñËØë\033[0m"
          make -j$(nproc) || make -j1 || echo "‚ö†Ô∏è ÁºñËØëÂ§±Ë¥•"
          
      - name: üìä ÊòæÁ§∫ÊúÄÁªàÁ£ÅÁõòÁ©∫Èó¥
        run: |
          echo "üîç ÊúÄÁªàÁ£ÅÁõòÁ©∫Èó¥:"
          df -h

      - name: üì¶ Êî∂ÈõÜÁºñËØë‰∫ßÁâ©
        run: |
          chmod +x scripts/collect_artifacts.sh
          ./scripts/collect_artifacts.sh ${{ inputs.repo_short }} ${{ inputs.soc_name }} ${{ inputs.config_profile }}

      - name: üì§ ‰∏ä‰º†ÊûÑÂª∫‰∫ßÁâ©
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ inputs.repo_short }}-${{ inputs.soc_name }}-${{ inputs.config_profile }}
          path: |
            artifacts/
            logs/
          retention-days: 7

      - name: üîç Ëé∑ÂèñÂÜÖÊ†∏ÁâàÊú¨
        id: kernel_info
        run: |
          cd openwrt
          KERNEL_VER=$(make kernelconfig 2>/dev/null | grep "Kernel version" | awk '{print $3}' || echo "unknown")
          echo "version=$KERNEL_VER" >> $GITHUB_OUTPUT
          echo "üîß ÂÜÖÊ†∏ÁâàÊú¨: $KERNEL_VER"

      - name: üîç Ëé∑ÂèñËÆæÂ§á‰ø°ÊÅØ
        id: device_info
        run: |
          DEVICES=$(ls artifacts/ | grep -E "factory|sysupgrade" | cut -d'-' -f2 | sort -u | tr '\n' ',')
          echo "devices=$DEVICES" >> $GITHUB_OUTPUT
          echo "üì± ËÆæÂ§áÂàóË°®: $DEVICES"

      - name: üîç ÁîüÊàêÂìàÂ∏åÂÄº
        id: hash_info
        run: |
          HASH=$(sha256sum artifacts/*.bin 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "unknown")
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: ‚úÖ ÊûÑÂª∫ÁªìÊûú
        id: build_outcome
        run: |
          if [ -d "artifacts" ] && [ "$(ls -A artifacts)" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo -e "\033[32m‚úÖ ÊûÑÂª∫ÊàêÂäüÔºÅ\033[0m"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo -e "\033[31m‚ùå ÊûÑÂª∫Â§±Ë¥•ÔºÅ\033[0m"
            exit 1
          fi
