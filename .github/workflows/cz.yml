name: IPQ-CZ

on:
  schedule:
    - cron: '0 16 * * 4' # 北京时间周五0点 (UTC+8)
  workflow_dispatch: # 手动触发

env:
  CHIP_ARCH: ipq60xx # 当前芯片架构
  # 未来扩展架构 (已注释)
  # CHIP_ARCH: ipq80xx
  # CHIP_ARCH: mtk
  DEFAULT_IP: 192.168.111.1
  DEFAULT_HOSTNAME: WRT
  WIFI_PASSWORD: 12345678

jobs:
  # 清理磁盘空间
  cleanup:
    runs-on: ubuntu-22.04
    steps:
      - name: 清理磁盘空间
        uses: sbwml/actions@free-disk
        with:
          tool-cache: true
          large-packages: true
          docker-images: true
          swap-storage: true

  # 编译主流程
  build:
    needs: cleanup
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        branch:
          - repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            repo_short: immwrt
          - repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            repo_short: openwrt
          - repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            repo_short: libwrt
        config: [Ultra, Max, Pro] # 配置顺序确保最大缓存命中
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 初始化环境
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-setuptools rsync unzip zlib1g-dev file swig
          echo "BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$(make kernelversion | head -n1 | tr -d '\n')" >> $GITHUB_ENV

      - name: 克隆OpenWrt源码
        run: |
          git clone --depth=1 ${{ matrix.branch.repo_url }} -b ${{ matrix.branch.repo_branch }} openwrt
          cd openwrt
          echo "REPO_SHORT=${{ matrix.branch.repo_short }}" >> $GITHUB_ENV

      - name: 恢复L1缓存 - 工具链 (全分支共享)
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir/toolchain-*
          key: ${{ env.CHIP_ARCH }}-toolchain-${{ hashFiles('openwrt/toolchain/Makefile') }}
          restore-keys: |
            ${{ env.CHIP_ARCH }}-toolchain-

      - name: 恢复L2缓存 - 内核 (分支内共享)
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/target-*/linux-*/
            openwrt/staging_dir/target-*/linux-*/
          key: ${{ env.CHIP_ARCH }}-kernel-${{ matrix.branch.repo_short }}-${{ hashFiles('openwrt/target/linux/generic/config-*') }}
          restore-keys: |
            ${{ env.CHIP_ARCH }}-kernel-${{ matrix.branch.repo_short }}-

      - name: 恢复L3缓存 - 依赖包 (分支内共享)
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/target-*/root-*/
            openwrt/staging_dir/target-*/root-*/
          key: ${{ env.CHIP_ARCH }}-deps-${{ matrix.branch.repo_short }}-${{ hashFiles('openwrt/package/libs/**') }}
          restore-keys: |
            ${{ env.CHIP_ARCH }}-deps-${{ matrix.branch.repo_short }}-

      - name: 恢复L4缓存 - 基础系统 (分支内共享)
        id: cache-base
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/target-*/
            openwrt/staging_dir/target-*/
          key: ${{ env.CHIP_ARCH }}-base-${{ matrix.branch.repo_short }}-${{ hashFiles('openwrt/package/base-files/**') }}
          restore-keys: |
            ${{ env.CHIP_ARCH }}-base-${{ matrix.branch.repo_short }}-

      - name: 恢复L5缓存 - 软件包 (全分支共享)
        id: cache-packages
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/package-*/
            openwrt/staging_dir/package-*/
          key: ${{ env.CHIP_ARCH }}-packages-${{ hashFiles('openwrt/feeds.conf.default', 'openwrt/scripts/feeds') }}
          restore-keys: |
            ${{ env.CHIP_ARCH }}-packages-

      - name: 恢复DL缓存 (下载源码)
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ env.CHIP_ARCH }}-dl-${{ hashFiles('openwrt/feeds.conf.default') }}
          restore-keys: |
            ${{ env.CHIP_ARCH }}-dl-

      - name: 执行自定义脚本
        run: |
          cd openwrt
          chmod +x ../scripts/scripts.sh
          ../scripts/scripts.sh 2>&1 | tee build.log
        continue-on-error: false

      - name: 合并配置文件
        run: |
          cd openwrt
          # 合并配置文件 (芯片基础 + 分支基础 + 软件包配置)
          cat ../configs/${{ env.CHIP_ARCH }}_base.config > .config
          cat ../configs/${{ matrix.branch.repo_short }}_base.config >> .config
          cat ../configs/${{ matrix.config }}.config >> .config
          
          # 生成最终配置
          make defconfig
          
          # 获取设备名称
          DEVICE_NAME=$(grep CONFIG_TARGET_DEVICE_ .config | sed 's/.*DEVICE_\(.*\)=y/\1/' | head -n1)
          echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV

      - name: 分层编译
        run: |
          cd openwrt
          set -euo pipefail
          
          # L1: 工具链 (如果缓存未命中)
          if [ "${{ steps.cache-toolchain.outputs.cache-hit }}" != "true" ]; then
            echo "编译工具链..."
            make toolchain/install -j$(nproc) || { echo "工具链编译失败"; exit 1; }
          fi
          
          # L2: 内核 (如果缓存未命中)
          if [ "${{ steps.cache-kernel.outputs.cache-hit }}" != "true" ]; then
            echo "编译内核..."
            make target/compile -j$(nproc) || { echo "内核编译失败"; exit 1; }
          fi
          
          # L3: 依赖包 (如果缓存未命中)
          if [ "${{ steps.cache-deps.outputs.cache-hit }}" != "true" ]; then
            echo "编译依赖包..."
            make package/compile -j$(nproc) || { echo "依赖包编译失败"; exit 1; }
          fi
          
          # L4: 基础系统 (如果缓存未命中)
          if [ "${{ steps.cache-base.outputs.cache-hit }}" != "true" ]; then
            echo "编译基础系统..."
            make target/install -j$(nproc) || { echo "基础系统编译失败"; exit 1; }
          fi
          
          # L5: 软件包 (如果缓存未命中)
          if [ "${{ steps.cache-packages.outputs.cache-hit }}" != "true" ]; then
            echo "编译软件包..."
            make package/compile -j$(nproc) || { echo "软件包编译失败"; exit 1; }
          fi
          
          # 最终编译固件
          echo "编译固件..."
          make -j$(nproc) || { echo "固件编译失败"; exit 1; }

      - name: 收集编译产物
        run: |
          cd openwrt
          mkdir -p ../artifacts
          
          # 重命名固件文件
          for file in bin/targets/*/*/*.bin; do
            if [ -f "$file" ]; then
              FILETYPE=$(echo "$file" | grep -oE "(factory|sysupgrade)")
              NEW_NAME="${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-${{ env.DEVICE_NAME }}-${FILETYPE}-${{ matrix.config }}.bin"
              cp "$file" "../artifacts/$NEW_NAME"
            fi
          done
          
          # 收集配置文件
          cp .config "../artifacts/${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-${{ env.DEVICE_NAME }}-${{ matrix.config }}.config"
          cp .config.buildinfo "../artifacts/${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-${{ env.DEVICE_NAME }}-${{ matrix.config }}.config.buildinfo"
          
          # 收集清单文件
          if [ -f "bin/targets/*/*/manifest" ]; then
            cp bin/targets/*/*/manifest "../artifacts/${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-${{ env.DEVICE_NAME }}-${{ matrix.config }}.manifest"
          fi
          
          # 收集日志文件
          cp build.log "../artifacts/${{ matrix.branch.repo_short }}-${{ env.CHIP_ARCH }}-${{ env.DEVICE_NAME }}-${{ matrix.config }}.log"
          
          # 收集IPK/APK文件
          mkdir -p ../artifacts/packages
          find bin/packages -name "*.ipk" -exec cp {} ../artifacts/packages/ \;
          find bin/targets -name "*.ipk" -exec cp {} ../artifacts/packages/ \;

      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.branch.repo_short }}-${{ matrix.config }}-artifacts
          path: artifacts/
          retention-days: 7

  # 发布到Release
  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: 下载所有编译产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/

      - name: 整理发布文件
        run: |
          mkdir -p release-files
          
          # 整理配置文件
          find all-artifacts/ -name "*.config" -o -name "*.config.buildinfo" -o -name "*.manifest" | \
          tar -czf release-files/${{ env.CHIP_ARCH }}-config.tar.gz -T -
          
          # 整理日志文件
          find all-artifacts/ -name "*.log" | \
          tar -czf release-files/${{ env.CHIP_ARCH }}-log.tar.gz -T -
          
          # 整理应用包
          mkdir -p release-files/packages
          find all-artifacts/ -name "*.ipk" -exec cp {} release-files/packages/ \;
          cd release-files && tar -czf ${{ env.CHIP_ARCH }}-app.tar.gz packages/ && cd -
          
          # 整理固件文件
          find all-artifacts/ -name "*.bin" -exec cp {} release-files/ \;
          
          # 生成发布说明
          cat > release-files/release-notes.md << EOF
          ## 默认信息
          - **管理地址**: ${{ env.DEFAULT_IP }}
          - **默认用户**: root
          - **默认密码**: none
          - **WIFI密码**: ${{ env.WIFI_PASSWORD }}
          
          ## 固件信息
          - **芯片架构**: ${{ env.CHIP_ARCH }}
          - **内核版本**: ${{ env.KERNEL_VERSION }}
          - **作者**: Mary
          - **发布时间**: ${{ env.BUILD_TIME }}
          
          ## 支持设备
          - 京东云亚瑟 (jdcloud_re-ss-01)
          - 雅典娜 (jdcloud_re-cs-02)
          
          ## 包含的Luci应用
          $(find release-files/packages -name "luci-app-*.ipk" | sed 's/.*\//- /' | sort)
          EOF

      - name: 创建Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_TIME }}-${{ env.CHIP_ARCH }}
          name: IPQ-CZ 固件发布 - ${{ env.BUILD_TIME }}
          body_path: release-files/release-notes.md
          files: |
            release-files/*.bin
            release-files/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
