name: IPQ-CZ

on:
  schedule:
    # 北京时间周五0点 = UTC时间周四16:00
    - cron: '0 16 * * 4'
  workflow_dispatch:

permissions:
  contents: write

env:
  # 芯片变量（未来可扩展）
  CHIP: ipq60xx
  
  # 默认信息
  DEFAULT_IP: 192.168.111.1
  DEFAULT_USER: root
  DEFAULT_PASS: none
  DEFAULT_WIFI: 12345678
  AUTHOR: Mary

jobs:
  # 构建所有配置
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 配置类型在前，仓库在后
        config_type: [Ultra, Max, Pro]
        repo: 
          - imm|${{ github.server_url }}/laipeng668/immortalwrt.git|master|immwrt
          - open|${{ github.server_url }}/laipeng668/openwrt.git|master|openwrt
          - lib|${{ github.server_url }}/laipeng668/openwrt-6.x.git|k6.12-nss|libwrt
      max-parallel: 3
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 调试信息
        run: |
          echo "=== 环境信息 ==="
          echo "工作目录: $(pwd)"
          echo "目录内容:"
          ls -la
          echo "configs目录内容:"
          ls -la configs/ || echo "configs目录不存在"
          
          echo "=== 环境变量 ==="
          echo "CHIP: ${{ env.CHIP }}"
          echo "REPO_SHORT: ${{ env.REPO_SHORT }}"
          echo "CONFIG_TYPE: ${{ matrix.config_type }}"
          
          echo "=== 配置文件内容 ==="
          echo "芯片基础配置 (configs/${{ env.CHIP }}_base.config):"
          head -10 configs/${{ env.CHIP }}_base.config || echo "文件不存在或为空"
          
          echo "仓库基础配置 (configs/${{ env.REPO_SHORT }}_base.config):"
          head -10 configs/${{ env.REPO_SHORT }}_base.config || echo "文件不存在或为空"
          
          echo "配置类型文件 (configs/${{ matrix.config_type }}.config):"
          head -10 configs/${{ matrix.config_type }}.config || echo "文件不存在或为空"
          
      - name: 设置仓库环境变量
        run: |
          set -e
          IFS='|' read -r REPO_KEY REPO_URL REPO_BRANCH REPO_SHORT <<< "${{ matrix.repo }}"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "REPO_SHORT=${REPO_SHORT}" >> $GITHUB_ENV
          echo "CONFIG_TYPE=${{ matrix.config_type }}" >> $GITHUB_ENV
          echo "设置仓库环境变量完成: REPO_SHORT=${REPO_SHORT}, REPO_BRANCH=${REPO_BRANCH}"
          
      - name: 初始化错误日志
        run: |
          set -e
          mkdir -p logs
          echo "=== 构建开始: ${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ matrix.config_type }} ===" > logs/error.log
          echo "错误日志初始化完成"
          
      - name: 清理工作目录
        run: |
          set -e
          echo "正在清理工作目录..."
          rm -rf openwrt temp_config
          echo "工作目录清理完成"
          
      # 优化缓存策略 - 更具体的缓存键
      - name: 缓存feeds目录
        uses: actions/cache@v4
        with:
          path: openwrt/feeds
          key: feeds-${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            feeds-${{ env.REPO_SHORT }}-${{ env.CHIP }}-
            feeds-${{ env.REPO_SHORT }}-
            feeds-
          
      - name: 缓存下载目录
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            dl-${{ env.REPO_SHORT }}-${{ env.CHIP }}-
            dl-${{ env.REPO_SHORT }}-
            dl-
            
      - name: 缓存ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ env.REPO_SHORT }}-${{ env.CHIP }}-
            ccache-${{ env.REPO_SHORT }}-
            ccache-
            
      - name: 缓存工具链目录
        uses: actions/cache@v4
        with:
          path: openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            toolchain-${{ env.REPO_SHORT }}-${{ env.CHIP }}-
            toolchain-${{ env.REPO_SHORT }}-
            toolchain-
            
      - name: 缓存staging目录
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir
          key: staging-${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            staging-${{ env.REPO_SHORT }}-${{ env.CHIP }}-
            staging-${{ env.REPO_SHORT }}-
            staging-
            
      - name: 检查缓存状态
        run: |
          echo "=== 缓存状态检查 ===" >> logs/error.log
          if [ -d "openwrt/feeds" ] && [ "$(ls -A openwrt/feeds)" ]; then
            echo "feeds缓存: 命中" >> logs/error.log
          else
            echo "feeds缓存: 未命中" >> logs/error.log
          fi
          
          if [ -d "openwrt/dl" ] && [ "$(ls -A openwrt/dl)" ]; then
            echo "dl缓存: 命中" >> logs/error.log
          else
            echo "dl缓存: 未命中" >> logs/error.log
          fi
          
          if [ -d "~/.ccache" ] && [ "$(ls -A ~/.ccache)" ]; then
            echo "ccache缓存: 命中" >> logs/error.log
          else
            echo "ccache缓存: 未命中" >> logs/error.log
          fi
          
          if [ -d "openwrt/build_dir" ] && [ "$(ls -A openwrt/build_dir)" ]; then
            echo "工具链缓存: 命中" >> logs/error.log
          else
            echo "工具链缓存: 未命中" >> logs/error.log
          fi
          
          if [ -d "openwrt/staging_dir" ] && [ "$(ls -A openwrt/staging_dir)" ]; then
            echo "staging缓存: 命中" >> logs/error.log
          else
            echo "staging缓存: 未命中" >> logs/error.log
          fi
          echo "缓存状态检查完成"
          
      - name: 合并配置文件
        run: |
          set -e
          mkdir -p temp_config
          echo "正在合并配置文件..." >> logs/error.log
          echo "合并文件: configs/${{ env.CHIP }}_base.config" >> logs/error.log
          cat configs/${{ env.CHIP }}_base.config > temp_config/.config
          echo "合并文件: configs/${{ env.REPO_SHORT }}_base.config" >> logs/error.log
          cat configs/${{ env.REPO_SHORT }}_base.config >> temp_config/.config
          echo "合并文件: configs/${{ matrix.config_type }}.config" >> logs/error.log
          cat configs/${{ matrix.config_type }}.config >> temp_config/.config
          
          # 验证配置文件合并成功
          if [ ! -s temp_config/.config ]; then
            echo "错误：配置文件合并失败" >> logs/error.log
            exit 1
          fi
          echo "配置文件合并成功，大小: $(wc -c < temp_config/.config) 字节" >> logs/error.log
          echo "配置文件合并完成"
          
      - name: 验证配置文件合并
        run: |
          set -e
          echo "=== 验证配置文件合并 ===" >> logs/error.log
          
          # 检查基础配置文件
          echo "检查基础配置文件..." >> logs/error.log
          if [ ! -f "configs/${{ env.CHIP }}_base.config" ]; then
            echo "错误：缺少芯片基础配置文件: configs/${{ env.CHIP }}_base.config" >> logs/error.log
            exit 1
          fi
          
          if [ ! -f "configs/${{ env.REPO_SHORT }}_base.config" ]; then
            echo "错误：缺少仓库基础配置文件: configs/${{ env.REPO_SHORT }}_base.config" >> logs/error.log
            exit 1
          fi
          
          if [ ! -f "configs/${{ matrix.config_type }}.config" ]; then
            echo "错误：缺少配置类型文件: configs/${{ matrix.config_type }}.config" >> logs/error.log
            exit 1
          fi
          
          # 检查合并后的配置文件
          echo "检查合并后的配置文件..." >> logs/error.log
          if [ ! -s temp_config/.config ]; then
            echo "错误：合并后的配置文件为空" >> logs/error.log
            exit 1
          fi
          
          # 验证关键配置项
          echo "验证关键配置项..." >> logs/error.log
          if ! grep -q "CONFIG_TARGET_qualcommax=y" temp_config/.config; then
            echo "错误：合并后的配置文件中缺少目标架构配置" >> logs/error.log
            exit 1
          fi
          
          if ! grep -q "CONFIG_TARGET_qualcommax_ipq60xx=y" temp_config/.config; then
            echo "错误：合并后的配置文件中缺少目标芯片配置" >> logs/error.log
            exit 1
          fi
          
          echo "配置文件验证通过" >> logs/error.log
          echo "配置文件验证完成"
          
      - name: 提取设备信息
        run: |
          set -e
          echo "=== 开始提取设备信息 ===" >> logs/error.log
          
          # 检查配置文件是否存在
          if [ ! -s temp_config/.config ]; then
            echo "错误：配置文件不存在或为空" >> logs/error.log
            exit 1
          fi
          
          # 调试：显示配置文件中的设备相关行
          echo "=== 配置文件中的设备相关行 ===" >> logs/error.log
          grep -E "CONFIG_TARGET_DEVICE" temp_config/.config >> logs/error.log
          echo "=================================" >> logs/error.log
          
          # 提取设备行 - 使用更精确的正则表达式
          DEVICE_LINES=$(grep '^CONFIG_TARGET_DEVICE_.*=y$' temp_config/.config)
          if [ -z "$DEVICE_LINES" ]; then
            echo "错误：配置文件中未找到启用的设备" >> logs/error.log
            echo "请检查配置文件是否包含类似以下行：" >> logs/error.log
            echo "CONFIG_TARGET_DEVICE_qualcommax_ipq60xx_DEVICE_jdcloud_re-ss-01=y" >> logs/error.log
            exit 1
          fi
          
          # 提取设备名称
          DEVICE_NAMES=""
          for line in $DEVICE_LINES; do
            # 使用更精确的sed表达式提取设备名称
            DEVICE_NAME=$(echo "$line" | sed -n 's/^CONFIG_TARGET_DEVICE_[^_]*_[^_]*_DEVICE_\([^=]*\)=y$/\1/p')
            if [ -n "$DEVICE_NAME" ]; then
              DEVICE_NAMES="$DEVICE_NAMES $DEVICE_NAME"
            fi
          done
          
          # 验证设备名称
          DEVICE_COUNT=$(echo "$DEVICE_NAMES" | wc -w)
          if [ "$DEVICE_COUNT" -eq 0 ]; then
            echo "错误：无法从配置文件中提取设备名称" >> logs/error.log
            echo "提取到的设备行: $DEVICE_LINES" >> logs/error.log
            exit 1
          fi
          
          echo "DEVICE_NAMES=${DEVICE_NAMES}" >> $GITHUB_ENV
          echo "提取到的设备名称: $DEVICE_NAMES" >> logs/error.log
          echo "设备数量: $DEVICE_COUNT" >> logs/error.log
          echo "设备信息提取完成"
          
      - name: 克隆源码
        run: |
          set -e
          echo "正在克隆源码仓库: ${{ env.REPO_URL }} (分支: ${{ env.REPO_BRANCH }})" >> logs/error.log
          git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
          echo "源码克隆完成" >> logs/error.log
          echo "源码克隆完成"
          
      - name: 更新feeds
        run: |
          set -e
          cd openwrt
          echo "=== 更新feeds前，feeds目录内容 ===" >> ../logs/error.log
          ls -la feeds/ >> ../logs/error.log 2>&1 || echo "feeds目录不存在" >> ../logs/error.log
          
          echo "更新feeds..." >> ../logs/error.log
          ./scripts/feeds update -a 2>&1 | tee -a ../logs/error.log
          
          echo "=== 更新feeds后，feeds目录内容 ===" >> ../logs/error.log
          ls -la feeds/ >> ../logs/error.log 2>&1 || echo "feeds目录不存在" >> ../logs/error.log
          
          echo "安装feeds..." >> ../logs/error.log
          ./scripts/feeds install -a 2>&1 | tee -a ../logs/error.log
          
          echo "=== 安装feeds后，feeds目录内容 ===" >> ../logs/error.log
          ls -la feeds/ >> ../logs/error.log 2>&1 || echo "feeds目录不存在" >> ../logs/error.log
          echo "Feeds更新和安装完成"
          
      - name: 安装依赖
        run: |
          set -e
          cd openwrt
          echo "=== 开始安装编译依赖 ===" >> ../logs/error.log
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-setuptools rsync unzip zlib1g-dev file wget
          echo "=== 编译依赖安装完成 ===" >> ../logs/error.log
          echo "系统依赖安装完成"
          
      - name: 编译固件
        run: |
          set -e
          cd openwrt
          
          # 应用配置
          cp ../temp_config/.config .config
          echo "=== 应用配置后的内容 ===" >> ../logs/error.log
          echo "=== 目标设备配置 ===" >> ../logs/error.log
          grep -E "CONFIG_TARGET" .config >> ../logs/error.log
          echo "====================" >> ../logs/error.log
          
          # 验证配置
          echo "=== 验证配置 ===" >> ../logs/error.log
          make defconfig 2>&1 | tee -a ../logs/error.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "错误：配置验证失败" >> ../logs/error.log
            exit 1
          fi
          
          # 启用ccache
          export CCACHE_DIR=~/.ccache
          export USE_CCACHE=1
          export CCACHE_COMPRESS=1
          ccache -M 5G 2>&1 | tee -a ../logs/error.log
          
          # 清理之前的构建（如果存在）
          echo "=== 清理之前的构建 ===" >> ../logs/error.log
          make clean 2>&1 | tee -a ../logs/error.log || true
          
          # 编译
          echo "=== 开始多线程编译 ===" >> ../logs/error.log
          make -j$(nproc) V=s 2>&1 | tee -a ../logs/error.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "错误：多线程编译失败，尝试使用单线程重新编译..." >> ../logs/error.log
            
            # 清理可能的损坏文件
            echo "=== 清理可能的损坏文件 ===" >> ../logs/error.log
            make -j1 clean 2>&1 | tee -a ../logs/error.log || true
            
            echo "=== 开始单线程编译 ===" >> ../logs/error.log
            make -j1 V=sc 2>&1 | tee -a ../logs/error.log
            if [ ${PIPESTATUS[0]} -ne 0 ]; then
              echo "错误：单线程编译也失败" >> ../logs/error.log
              exit 1
            fi
          fi
          echo "固件编译完成"
          
      - name: 收集产物
        if: always()
        run: |
          set -e
          ARTIFACT_DIR="${{ env.REPO_SHORT }}-${{ matrix.config_type }}"
          FIRMWARE_DIR="${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware"
          mkdir -p "$ARTIFACT_DIR"
          mkdir -p "$FIRMWARE_DIR"
          
          TARGET_DIR="openwrt/bin/targets/qualcommax/${{ env.CHIP }}"
          
          # 复制配置文件
          cp temp_config/.config "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.config"
          
          # 复制其他文件
          if [ -f "openwrt/.config.buildinfo" ]; then
            cp openwrt/.config.buildinfo "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.config.buildinfo"
          fi
          
          if [ -d "$TARGET_DIR" ] && [ -f "$TARGET_DIR"/*.manifest ]; then
            cp "$TARGET_DIR"/*.manifest "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.manifest"
          fi
          
          if [ -f "openwrt/build.log" ]; then
            cp openwrt/build.log "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}-build.log"
          fi
          
          if [ -d "openwrt/bin/packages" ]; then
            mkdir -p "$ARTIFACT_DIR/packages"
            cp -r openwrt/bin/packages/* "$ARTIFACT_DIR/packages/"
          fi
          
          if [ -f logs/error.log ] && [ -s logs/error.log ]; then
            cp logs/error.log "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}-error.log"
          fi
          
          # 处理固件文件
          if [ -d "$TARGET_DIR" ]; then
            for file in "$TARGET_DIR"/*.bin; do
              if [ -f "$file" ] && [[ "$file" == *"-squashfs-"* ]]; then
                DEVICE_NAME_FROM_FILE=$(basename "$file" | sed -n 's/^.*-\(.*\)-squashfs-.*\.bin$/\1/p')
                
                if [ -z "$DEVICE_NAME_FROM_FILE" ]; then
                  echo "警告：无法从文件名中提取设备名称: $(basename "$file")" >> logs/error.log
                  continue
                fi
                
                if [[ "$file" == *"factory"* ]]; then
                  FIRMWARE_TYPE="factory"
                elif [[ "$file" == *"sysupgrade"* ]]; then
                  FIRMWARE_TYPE="sysupgrade"
                else
                  continue
                fi
                
                NEW_NAME="${{ env.REPO_SHORT }}-${DEVICE_NAME_FROM_FILE}-${FIRMWARE_TYPE}-${{ matrix.config_type }}.bin"
                cp "$file" "$FIRMWARE_DIR/$NEW_NAME"
                echo "处理固件: $(basename "$file") -> $NEW_NAME" >> logs/error.log
              fi
            done
          fi
          echo "产物收集完成"
          
      - name: 上传产物
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ matrix.config_type }}
          path: |
            ${{ env.REPO_SHORT }}-${{ matrix.config_type }}/
          retention-days: 7
          if-no-files-found: error
          
      - name: 上传固件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware
          path: |
            ${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware/
          retention-days: 7
          if-no-files-found: error

  # 打包并发布Release
  package-and-release:
    needs: build
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/
          
      - name: 准备发布目录
        run: |
          set -e
          echo "正在准备发布目录..."
          mkdir -p release/{config,log,app,firmware,assets}
          
          # 收集配置文件
          echo "收集配置文件..."
          find all-artifacts -name "*.config" -exec cp {} release/config/ \;
          find all-artifacts -name "*.config.buildinfo" -exec cp {} release/config/ \;
          find all-artifacts -name "*.manifest" -exec cp {} release/config/ \;
          
          # 收集日志文件
          echo "收集日志文件..."
          find all-artifacts -name "*-build.log" -exec cp {} release/log/ \;
          find all-artifacts -name "*-error.log" -exec cp {} release/log/ \;
          
          # 收集软件包
          echo "收集软件包..."
          find all-artifacts -name "packages" -type d -exec cp -r {} release/app/ \;
          
          # 收集固件文件
          echo "收集固件文件..."
          find all-artifacts -name "*.bin" -exec cp {} release/firmware/ \;
          
          # 打包文件
          echo "打包文件..."
          tar -czf release/${{ env.CHIP }}-config.tar.gz -C release/config .
          tar -czf release/${{ env.CHIP }}-log.tar.gz -C release/log .
          tar -czf release/${{ env.CHIP }}-app.tar.gz -C release/app .
          
          # 复制到assets目录
          cp release/${{ env.CHIP }}-config.tar.gz release/assets/
          cp release/${{ env.CHIP }}-log.tar.gz release/assets/
          cp release/${{ env.CHIP }}-app.tar.gz release/assets/
          cp release/firmware/*.bin release/assets/ 2>/dev/null || true
          
          # 提取信息
          KERNEL_VERSION=""
          LUCI_APPS=""
          DEVICE_LIST=""
          
          for config_file in release/config/*.config; do
            KERNEL_VER=$(grep "^CONFIG_LINUX_KERNEL_VERSION=" "$config_file" | cut -d'"' -f2)
            if [ -n "$KERNEL_VER" ]; then
              KERNEL_VERSION="$KERNEL_VER"
              break
            fi
          done
          
          if [ -d release/app ]; then
            LUCI_APPS=$(find release/app -name "luci-app-*.ipk" | sed 's/.*\///g' | sort | uniq | tr '\n' ' ')
          fi
          
          if [ -d release/firmware ]; then
            DEVICE_LIST=$(ls release/firmware/*.bin | sed -n 's/.*-\([^-]*\)-.*\.bin/\1/p' | sort | uniq | tr '\n' ' ')
          fi
          
          echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV
          echo "LUCI_APPS=${LUCI_APPS}" >> $GITHUB_ENV
          echo "DEVICE_LIST=${DEVICE_LIST}" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
          
          # 创建Release body文件
          cat > release/body.md << EOF
          默认管理地址：${{ env.DEFAULT_IP }}
          默认用户：${{ env.DEFAULT_USER }}
          默认密码：${{ env.DEFAULT_PASS }}
          默认WIFI密码: ${{ env.DEFAULT_WIFI }}
          
          固件包括（${{ env.CHIP }}）的设备：${{ env.DEVICE_LIST }}
          
          固件内核版本：${{ env.KERNEL_VERSION }}
          作者: ${{ env.AUTHOR }}
          发布时间: ${{ env.RELEASE_DATE }}
          编译的luci-app列表：${{ env.LUCI_APPS }}
          
          ## 下载说明
          - 固件文件：请从下面的附件中下载对应设备的固件文件
          - 配置文件：${{ env.CHIP }}-config.tar.gz
          - 编译日志：${{ env.CHIP }}-log.tar.gz
          - 软件包：${{ env.CHIP }}-app.tar.gz
          EOF
          echo "发布目录准备完成"
          
      - name: 创建Release并上传文件
        uses: softprops/action-gh-release@v1
        if: always()
        with:
          tag_name: ${{ env.RELEASE_DATE }}-${{ env.CHIP }}
          name: ${{ env.CHIP }} Release ${{ env.RELEASE_DATE }}
          body_path: release/body.md
          files: |
            release/assets/*
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
