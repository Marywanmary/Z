name: ipq60xx-TRAE

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: '是否开启SSH调试'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      chip:
        description: '选择芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options:
          - 'ipq60xx'
      branch:
        description: '选择固件分支'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'immwrt'
          - 'openwrt'
          - 'libwrt'

env:
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
  UPLOAD_RELEASE: true
  RELEASE_TAG: ${{ github.event.inputs.chip }}-${{ github.run_id }}
  CHIP: ${{ github.event.inputs.chip }}

jobs:
  # 定义矩阵构建任务
  build:
    name: 编译 ${{ matrix.branch }}-${{ matrix.config }}
    runs-on: ubuntu-22.04
    
    # 定义构建矩阵
    strategy:
      fail-fast: false
      matrix:
        include:
          # 根据选择的分支动态生成矩阵
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            config: Ultra
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            config: Max
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            config: Pro
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            config: Ultra
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            config: Max
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            config: Pro
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            config: Ultra
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            config: Max
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            config: Pro

    # 过滤不需要的分支
    if: ${{ github.event.inputs.branch == 'all' || github.event.inputs.branch == 'immwrt' || github.event.inputs.branch == 'openwrt' || github.event.inputs.branch == 'libwrt' }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 检查分支匹配
        id: check_branch
        run: |
          if [[ "${{ github.event.inputs.branch }}" == "all" || "${{ github.event.inputs.branch }}" == "${{ matrix.branch }}" ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "match=false" >> $GITHUB_OUTPUT
            echo "跳过 ${{ matrix.branch }}-${{ matrix.config }} 构建，因为不匹配所选分支 ${{ github.event.inputs.branch }}"
          fi
          
      - name: 初始化编译环境
        if: steps.check_branch.outputs.match == 'true'
        run: |
          echo "============== 开始初始化编译环境 =============="
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/immortalwrt/immortalwrt/master/scripts/ubuntu-setup.sh | grep -v '#' | xargs)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "============== 编译环境初始化完成 =============="

      - name: 克隆源代码
        working-directory: /workdir
        if: steps.check_branch.outputs.match == 'true'
        run: |
          echo "============== 开始克隆 ${{ matrix.branch }} 源代码 =============="
          git clone --depth 1 --single-branch --branch ${{ matrix.repo_branch }} ${{ matrix.repo_url }} openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cd openwrt
          echo "OPENWRT_ROOT=$PWD" >> $GITHUB_ENV
          echo "============== ${{ matrix.branch }} 源代码克隆完成 =============="

      # 恢复缓存
      - name: 恢复工具链缓存
        uses: actions/cache/restore@v4
        with:
          path: |
            /workdir/openwrt/staging_dir
            /workdir/openwrt/build_dir/toolchain-*
          key: toolchain-${{ matrix.branch }}-${{ env.CHIP }}-${{ hashFiles('openwrt/target/linux/**/*.mk') }}
          restore-keys: |
            toolchain-${{ matrix.branch }}-${{ env.CHIP }}-

      - name: 恢复依赖包缓存
        uses: actions/cache/restore@v4
        with:
          path: /workdir/openwrt/dl
          key: dl-${{ matrix.branch }}-${{ env.CHIP }}-${{ hashFiles('openwrt/feeds.conf.default') }}
          restore-keys: |
            dl-${{ matrix.branch }}-${{ env.CHIP }}-
            dl-${{ matrix.branch }}-

      - name: 恢复feeds缓存
        uses: actions/cache/restore@v4
        with:
          path: /workdir/openwrt/feeds
          key: feeds-${{ matrix.branch }}-${{ env.CHIP }}-${{ hashFiles('openwrt/feeds.conf.default') }}
          restore-keys: |
            feeds-${{ matrix.branch }}-${{ env.CHIP }}-
            feeds-${{ matrix.branch }}-

      - name: 恢复ccache缓存
        uses: actions/cache/restore@v4
        with:
          path: /workdir/.ccache
          key: ccache-${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}
          restore-keys: |
            ccache-${{ matrix.branch }}-${{ env.CHIP }}-
            ccache-${{ matrix.branch }}-

      - name: 更新feeds
        run: |
          echo "============== 开始更新feeds =============="
          cd $OPENWRT_ROOT
          mkdir -p /workdir/.ccache
          ln -sf /workdir/.ccache $OPENWRT_ROOT/.ccache
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "============== feeds更新完成 =============="

      - name: 加载自定义配置
        run: |
          echo "============== 开始加载自定义配置 =============="
          cd $OPENWRT_ROOT
          
          # 合并配置文件
          echo "合并配置文件: ${{ env.CHIP }}_base.config + ${{ matrix.branch }}_base.config + ${{ matrix.config }}.config"
          cat $GITHUB_WORKSPACE/configs/${{ env.CHIP }}_base.config > .config
          cat $GITHUB_WORKSPACE/configs/${{ matrix.branch }}_base.config >> .config
          cat $GITHUB_WORKSPACE/configs/${{ matrix.config }}.config >> .config
          
          # 执行自定义脚本
          cp -f $GITHUB_WORKSPACE/scripts/scriptT.sh $OPENWRT_ROOT/scriptT.sh
          chmod +x $OPENWRT_ROOT/scriptT.sh
          cd $OPENWRT_ROOT && ./scriptT.sh
          
          # 生成最终配置
          make defconfig
          
          # 提取设备名称
          DEVICE_NAMES=$(grep -oP 'CONFIG_TARGET_DEVICE_\w+_\w+_DEVICE_\w+_\w+\S+(?=\=y)' .config | sed 's/CONFIG_TARGET_DEVICE_.*_DEVICE_//g')
          echo "DEVICE_NAMES=${DEVICE_NAMES}" >> $GITHUB_ENV
          echo "检测到设备: ${DEVICE_NAMES}"
          
          # 获取内核版本
          KERNEL_VERSION=$(grep -oP 'KERNEL_PATCHVER=\K\d+\.\d+' target/linux/${{ env.CHIP }}/Makefile || echo "未知")
          echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV
          echo "内核版本: ${KERNEL_VERSION}"
          
          echo "============== 自定义配置加载完成 =============="

      - name: 编译固件
        id: compile
        run: |
          echo "============== 开始编译固件 =============="
          cd $OPENWRT_ROOT
          echo -e "$(nproc) 线程编译中，请耐心等待..."
          
          # 设置ccache
          export CCACHE_DIR=/workdir/.ccache
          export CCACHE_MAXSIZE=10G
          
          # 显示ccache统计信息
          ccache -s
          
          # 编译固件
          make -j$(nproc) V=s || make -j1 V=s
          
          # 显示编译后的ccache统计信息
          echo "编译后的ccache统计信息:"
          ccache -s
          
          echo "============== 固件编译完成 =============="
          
          # 检查编译结果
          if [ -d $OPENWRT_ROOT/bin/targets/*/${{ env.CHIP }} ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      # 保存缓存
      - name: 保存工具链缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            /workdir/openwrt/staging_dir
            /workdir/openwrt/build_dir/toolchain-*
          key: toolchain-${{ matrix.branch }}-${{ env.CHIP }}-${{ hashFiles('openwrt/target/linux/**/*.mk') }}

      - name: 保存依赖包缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /workdir/openwrt/dl
          key: dl-${{ matrix.branch }}-${{ env.CHIP }}-${{ hashFiles('openwrt/feeds.conf.default') }}

      - name: 保存feeds缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /workdir/openwrt/feeds
          key: feeds-${{ matrix.branch }}-${{ env.CHIP }}-${{ hashFiles('openwrt/feeds.conf.default') }}

      - name: 保存ccache缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /workdir/.ccache
          key: ccache-${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}

      - name: 处理编译产物
        if: steps.compile.outputs.status == 'success'
        run: |
          echo "============== 开始处理编译产物 =============="
          cd $OPENWRT_ROOT
          
          # 创建临时目录
          mkdir -p /tmp/artifact/firmware
          mkdir -p /tmp/artifact/config
          mkdir -p /tmp/artifact/logs
          mkdir -p /tmp/artifact/packages
          
          # 复制并处理固件
          bash $GITHUB_WORKSPACE/scripts/build.sh process_artifacts \
            ${{ matrix.branch }} ${{ env.CHIP }} "${{ env.DEVICE_NAMES }}" ${{ matrix.config }}
          
          echo "============== 编译产物处理完成 =============="

      - name: 上传固件到Artifacts
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-firmware
          path: /tmp/artifact/firmware/
          retention-days: 7

      - name: 上传配置到Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-config
          path: /tmp/artifact/config/
          retention-days: 7

      - name: 上传日志到Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-logs
          path: /tmp/artifact/logs/
          retention-days: 7

      - name: 上传软件包到Artifacts
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-packages
          path: /tmp/artifact/packages/
          retention-days: 7

      - name: 启用SSH连接
        uses: mxschmitt/action-tmate@v3
        if: github.event.inputs.ssh == 'true'
        timeout-minutes: 30

  # 发布Release
  release:
    name: 发布Release
    needs: build
    if: ${{ success() && github.event.inputs.branch == 'all' }}
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: 准备发布文件
        run: |
          echo "============== 开始准备发布文件 =============="
          
          # 创建发布目录
          mkdir -p ./release
          
          # 处理固件文件
          find ./artifacts -name "*.bin" -exec cp {} ./release/ \;
          
          # 打包配置文件
          mkdir -p ./temp_config
          cp -r ./artifacts/*config* ./temp_config/ 2>/dev/null || true
          tar -czf ./release/${{ env.CHIP }}-config.tar.gz -C ./temp_config .
          
          # 打包日志文件
          mkdir -p ./temp_logs
          cp -r ./artifacts/*logs* ./temp_logs/ 2>/dev/null || true
          tar -czf ./release/${{ env.CHIP }}-log.tar.gz -C ./temp_logs .
          
          # 打包软件包
          mkdir -p ./temp_packages
          cp -r ./artifacts/*packages* ./temp_packages/ 2>/dev/null || true
          tar -czf ./release/${{ env.CHIP }}-app.tar.gz -C ./temp_packages .
          
          # 获取软件包列表
          APP_LIST=$(find ./temp_packages -name "*.ipk" -o -name "*.apk" | sort | uniq | sed 's/.*\///g' | sed 's/_.*.ipk//g' | sed 's/_.*.apk//g' | grep -E "^luci-app-" | sort | uniq)
          echo "APP_LIST<<EOF" >> $GITHUB_ENV
          echo "$APP_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # 获取日期
          RELEASE_DATE=$(date +"%Y-%m-%d")
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV
          
          echo "============== 发布文件准备完成 =============="

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_DATE }}-${{ env.CHIP }}
          name: ${{ env.RELEASE_DATE }} ${{ env.CHIP }} 固件发布
          body: |
            ### 固件信息
            - 默认管理地址：192.168.111.1
            - 默认用户：root
            - 默认密码：none
            - 默认WIFI密码: 12345678
            
            ### 设备支持
            - 固件包括 ${{ env.CHIP }} 的京东云亚瑟、雅典娜
            - 固件内核版本：${{ env.KERNEL_VERSION }}
            
            ### 编译信息
            - 作者: Mary
            - 发布时间: ${{ env.RELEASE_DATE }}
            
            ### 包含的luci-app列表
            ```
            ${{ env.APP_LIST }}
            ```
          files: |
            ./release/*
          draft: false
          prerelease: false
