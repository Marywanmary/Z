name: ipq60xx-TRAE4

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: '是否开启SSH调试'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      chip:
        description: '选择芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options:
          - 'ipq60xx'
      branch:
        description: '选择固件分支'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'immwrt'
          - 'openwrt'
          - 'libwrt'

env:
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
  UPLOAD_RELEASE: true
  RELEASE_TAG: ${{ github.event.inputs.chip }}-${{ github.run_id }}
  CHIP: ${{ github.event.inputs.chip }}

jobs:
  # 定义矩阵构建任务
  build:
    name: 编译 ${{ matrix.branch }}-${{ matrix.config }}
    runs-on: ubuntu-22.04
    
    # 定义构建矩阵 - 重新组织顺序：所有Ultra在前，Max居中，Pro最后
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include:
          # 所有Ultra配置
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            config: Ultra
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            config: Ultra
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            config: Ultra
          # 所有Max配置
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            config: Max
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            config: Max
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            config: Max
          # 所有Pro配置
          - branch: immwrt
            repo_url: https://github.com/laipeng668/immortalwrt.git
            repo_branch: master
            config: Pro
          - branch: openwrt
            repo_url: https://github.com/laipeng668/openwrt.git
            repo_branch: master
            config: Pro
          - branch: libwrt
            repo_url: https://github.com/laipeng668/openwrt-6.x.git
            repo_branch: k6.12-nss
            config: Pro

    # 过滤不需要的分支
    if: ${{ github.event.inputs.branch == 'all' || github.event.inputs.branch == 'immwrt' || github.event.inputs.branch == 'openwrt' || github.event.inputs.branch == 'libwrt' }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 检查分支匹配
        id: check_branch
        run: |
          if [[ "${{ github.event.inputs.branch }}" == "all" || "${{ github.event.inputs.branch }}" == "${{ matrix.branch }}" ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "match=false" >> $GITHUB_OUTPUT
            echo "跳过 ${{ matrix.branch }}-${{ matrix.config }} 构建，因为不匹配所选分支 ${{ github.event.inputs.branch }}"
          fi
          
      - name: 初始化编译环境
        if: steps.check_branch.outputs.match == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "============== 开始初始化编译环境 =============="
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/laipeng668/Actions-OpenWrt/main/depends-ubuntu-2204)
          # 明确安装ccache
          sudo -E apt-get -qq install ccache
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "============== 编译环境初始化完成 =============="

      - name: 克隆源代码
        working-directory: /workdir
        if: steps.check_branch.outputs.match == 'true'
        run: |
          echo "============== 开始克隆 ${{ matrix.branch }} 源代码 =============="
          git clone --depth 1 --single-branch --branch ${{ matrix.repo_branch }} ${{ matrix.repo_url }} openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cd openwrt
          echo "OPENWRT_ROOT=$PWD" >> $GITHUB_ENV
          # 创建ipq60xx目标文件夹
          mkdir -p target/linux/ipq60xx
          # 确保Makefile存在（移除KERNEL_PATCHVER设置）
          if [ ! -f "target/linux/${{ env.CHIP }}/Makefile" ]; then
            echo 'include $(TOPDIR)/rules.mk' > target/linux/${{ env.CHIP }}/Makefile
          fi
          echo "============== ${{ matrix.branch }} 源代码克隆完成 =============="

      # 恢复缓存 - 基于芯片+分支，回退到芯片
      - name: 恢复工具链缓存
        uses: actions/cache/restore@v4
        with:
          path: |
            /workdir/openwrt/staging_dir
            /workdir/openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/target/linux/ipq60xx/Makefile') }}
          restore-keys: |
            toolchain-${{ env.CHIP }}-${{ matrix.branch }}-
            toolchain-${{ env.CHIP }}-
            toolchain-

      - name: 恢复依赖包缓存
        uses: actions/cache/restore@v4
        with:
          path: /workdir/openwrt/dl
          # 修复：使用feeds.conf.default的哈希而不是.config，因为恢复时.config还不存在
          key: dl-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/feeds.conf.default') }}
          restore-keys: |
            dl-${{ env.CHIP }}-${{ matrix.branch }}-
            dl-${{ env.CHIP }}-
            dl-

      - name: 恢复feeds缓存
        uses: actions/cache/restore@v4
        with:
          path: /workdir/openwrt/feeds
          key: feeds-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/feeds.conf.default') }}
          restore-keys: |
            feeds-${{ env.CHIP }}-${{ matrix.branch }}-
            feeds-${{ env.CHIP }}-
            feeds-

      - name: 更新feeds
        run: |
          echo "============== 开始更新feeds =============="
          cd $OPENWRT_ROOT
          mkdir -p /workdir/.ccache
          ln -sf /workdir/.ccache $OPENWRT_ROOT/.ccache
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "============== feeds更新完成 =============="

      - name: 加载自定义配置
        run: |
          echo "============== 开始加载自定义配置 =============="
          cd $OPENWRT_ROOT
          
          # 合并配置文件
          echo "合并配置文件: ${{ env.CHIP }}_base.config + ${{ matrix.branch }}_base.config + ${{ matrix.config }}.config"
          cat $GITHUB_WORKSPACE/configs/${{ env.CHIP }}_base.config > .config
          cat $GITHUB_WORKSPACE/configs/${{ matrix.branch }}_base.config >> .config
          cat $GITHUB_WORKSPACE/configs/${{ matrix.config }}.config >> .config
          
          # 添加boost-system包
          echo "CONFIG_PACKAGE_boost=y" >> .config
          echo "CONFIG_PACKAGE_boost-system=y" >> .config
          
          # 执行自定义脚本
          cp -f $GITHUB_WORKSPACE/scripts/scriptT.sh $OPENWRT_ROOT/scriptT.sh
          chmod +x $OPENWRT_ROOT/scriptT.sh
          cd $OPENWRT_ROOT && ./scriptT.sh
          
          # 确保ipq60xx目标文件夹的Makefile存在（移除KERNEL_PATCHVER设置）
          if [ ! -f "target/linux/${{ env.CHIP }}/Makefile" ]; then
            mkdir -p target/linux/${{ env.CHIP }}
            echo 'include $(TOPDIR)/rules.mk' > target/linux/${{ env.CHIP }}/Makefile
          fi
          
          # 生成最终配置
          make defconfig
          
          # 显示配置文件前200行
          echo "============== 配置文件内容（前200行） =============="
          head -n 200 .config
          echo "============== 配置文件内容显示完成 =============="
          
          # 获取内核版本（使用6.12内核）
          if [ -f "target/linux/generic/kernel-6.12" ]; then
            VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
          else
            VERSION_KERNEL="6.12"
            echo "警告: 未找到kernel-6.12文件，使用默认版本6.12"
          fi
          echo "VERSION_KERNEL=${VERSION_KERNEL}" >> $GITHUB_ENV
          echo "内核版本: ${VERSION_KERNEL}"
          
          echo "============== 自定义配置加载完成 =============="

      # 修复：将ccache和构建目录缓存恢复移到配置加载之后，因为需要.config文件
      - name: 恢复ccache缓存
        uses: actions/cache/restore@v4
        with:
          path: /workdir/.ccache
          key: ccache-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            ccache-${{ env.CHIP }}-${{ matrix.branch }}-
            ccache-${{ env.CHIP }}-
            ccache-
      
      - name: 恢复构建目录缓存
        uses: actions/cache/restore@v4
        with:
          path: /workdir/openwrt/build_dir/target-*
          key: build-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            build-${{ env.CHIP }}-${{ matrix.branch }}-
            build-${{ env.CHIP }}-
            build-

      - name: 显示缓存状态
        run: |
          echo "============== 缓存状态信息 =============="
          echo "工具链缓存大小: $(du -sh /workdir/openwrt/staging_dir 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "依赖包缓存大小: $(du -sh /workdir/openwrt/dl 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "Feeds缓存大小: $(du -sh /workdir/openwrt/feeds 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "构建目录缓存大小: $(du -sh /workdir/openwrt/build_dir/target-* 2>/dev/null | cut -f1 || echo 'N/A')"
          if command -v ccache &> /dev/null; then
            echo "Ccache统计信息:"
            ccache -s
          else
            echo "Ccache未安装"
          fi
          echo "============== 缓存状态显示完成 =============="

      - name: 显示编译输出颜色说明
        run: |
          echo "============== 编译输出颜色说明 =============="
          echo -e "\033[1;36m青色文本\033[0m - 表示目录切换信息 (make: Entering/Leaving directory)"
          echo -e "\033[1;31m红色文本\033[0m - 表示错误信息 (error:, Error, ERROR, failed to build)"
          echo -e "\033[1;33m黄色文本\033[0m - 表示警告信息 (warning:, Warning, WARNING)"
          echo -e "\033[1;32m绿色文本\033[0m - 表示Make命令和编译时间 (make [xxx], time: compile)"
          echo -e "普通文本 - 其他编译信息"
          echo "============== 编译输出颜色说明显示完成 =============="

      - name: 编译固件
        id: compile
        run: |
          echo "============== 开始编译固件 =============="
          cd $OPENWRT_ROOT
          echo -e "$(nproc) 线程编译中，请耐心等待..."
          
          # 设置ccache（优化配置）
          export CCACHE_DIR=/workdir/.ccache
          export CCACHE_MAXSIZE=5G  # 减小缓存大小
          export CCACHE_COMPRESS=1  # 启用压缩
          export CCACHE_COMPRESSLEVEL=6  # 压缩级别
          
          # 显示ccache统计信息
          echo -e "\n\033[1;36m===== CCACHE 统计信息 =====\033[0m"
          ccache -s
          
          # 编译固件，过滤输出
          echo -e "\n\033[1;33m===== 开始编译固件 =====\033[0m"
          make -j$(nproc) V=s 2>&1 | \
          grep -E --color=never \
            -e "make.*:.*Entering directory" \
            -e "make.*:.*Leaving directory" \
            -e "make.*\[.*\]" \
            -e "error:" \
            -e "Error" \
            -e "ERROR" \
            -e "warning:" \
            -e "Warning" \
            -e "WARNING" \
            # -e "CC " \
            # -e "CXX " \
            # -e "LD " \
            # -e "AR " \
            -e "INSTALL" \
            -e "COLLECT_GCOV" \
            -e "Package/.* is missing" \
            -e "Build completed" \
            -e "failed to build" \
            -e "time: .*compile" \
            -e "=======" \
            -e "^  " | \
          while IFS= read -r line; do
            # 高亮显示关键词
            if [[ "$line" =~ make.*:.*Entering\ directory ]] || [[ "$line" =~ make.*:.*Leaving\ directory ]]; then
              echo -e "\033[1;36m$line\033[0m"
            elif [[ "$line" =~ error: ]] || [[ "$line" =~ Error ]] || [[ "$line" =~ ERROR ]] || [[ "$line" =~ failed\ to\ build ]]; then
              echo -e "\033[1;31m$line\033[0m"
            elif [[ "$line" =~ warning: ]] || [[ "$line" =~ Warning ]] || [[ "$line" =~ WARNING ]]; then
              echo -e "\033[1;33m$line\033[0m"
            elif [[ "$line" =~ make.*\[.*\] ]] || [[ "$line" =~ time:\ .*compile ]]; then
              echo -e "\033[1;32m$line\033[0m"
            else
              echo "$line"
            fi
          done
          
          # 如果上述命令失败，尝试单线程编译
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo -e "\n\033[1;31m===== 多线程编译失败，尝试单线程编译 =====\033[0m"
            make -j1 V=s 2>&1 | \
            grep -E --color=never \
              -e "make.*:.*Entering directory" \
              -e "make.*:.*Leaving directory" \
              -e "make.*\[.*\]" \
              -e "error:" \
              -e "Error" \
              -e "ERROR" \
              -e "warning:" \
              -e "Warning" \
              -e "WARNING" \
              # -e "CC " \
              # -e "CXX " \
              # -e "LD " \
              # -e "AR " \
              -e "INSTALL" \
              -e "COLLECT_GCOV" \
              -e "Package/.* is missing" \
              -e "Build completed" \
              -e "failed to build" \
              -e "time: .*compile" \
              -e "=======" \
              -e "^  " | \
            while IFS= read -r line; do
              # 高亮显示关键词
              if [[ "$line" =~ make.*:.*Entering\ directory ]] || [[ "$line" =~ make.*:.*Leaving\ directory ]]; then
                echo -e "\033[1;36m$line\033[0m"
              elif [[ "$line" =~ error: ]] || [[ "$line" =~ Error ]] || [[ "$line" =~ ERROR ]] || [[ "$line" =~ failed\ to\ build ]]; then
                echo -e "\033[1;31m$line\033[0m"
              elif [[ "$line" =~ warning: ]] || [[ "$line" =~ Warning ]] || [[ "$line" =~ WARNING ]]; then
                echo -e "\033[1;33m$line\033[0m"
              elif [[ "$line" =~ make.*\[.*\] ]] || [[ "$line" =~ time:\ .*compile ]]; then
                echo -e "\033[1;32m$line\033[0m"
              else
                echo "$line"
              fi
            done
          fi
          
          # 显示编译后的ccache统计信息
          echo -e "\n\033[1;36m===== 编译后的CCACHE统计信息 =====\033[0m"
          ccache -s
          
          echo -e "\n\033[1;33m===== 固件编译完成 =====\033[0m"
          
          # 检查编译结果
          if [ -d $OPENWRT_ROOT/bin/targets/*/${{ env.CHIP }} ]; then
            echo -e "\n\033[1;32m===== 编译成功 =====\033[0m"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo -e "\n\033[1;31m===== 编译失败 =====\033[0m"
            echo "status=failed" >> $GITHUB_OUTPUT
            # 输出编译失败时的调试信息
            echo "编译失败，输出目录内容:"
            ls -la $OPENWRT_ROOT/bin/targets/ || echo "bin/targets目录不存在"
            find $OPENWRT_ROOT/bin -name "*.bin" -o -name "*.manifest" | head -20 || echo "未找到任何编译产物"
          fi

      # 保存缓存 - 基于芯片+分支
      - name: 保存工具链缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            /workdir/openwrt/staging_dir
            /workdir/openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/target/linux/ipq60xx/Makefile') }}

      - name: 保存依赖包缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /workdir/openwrt/dl
          key: dl-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/feeds.conf.default') }}

      - name: 保存feeds缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /workdir/openwrt/feeds
          key: feeds-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/feeds.conf.default') }}

      - name: 保存ccache缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /workdir/.ccache
          key: ccache-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/.config') }}
      
      - name: 保存构建目录缓存
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /workdir/openwrt/build_dir/target-*
          key: build-${{ env.CHIP }}-${{ matrix.branch }}-${{ hashFiles('openwrt/.config') }}

      - name: 处理编译产物
        if: steps.compile.outputs.status == 'success'
        run: |
          echo "============== 开始处理编译产物 =============="
          cd $OPENWRT_ROOT
          
          # 创建临时目录
          mkdir -p /tmp/artifact/firmware
          mkdir -p /tmp/artifact/config
          mkdir -p /tmp/artifact/logs
          mkdir -p /tmp/artifact/packages
          
          # 复制并处理固件
          bash $GITHUB_WORKSPACE/scripts/build.sh process_artifacts \
            ${{ matrix.branch }} ${{ env.CHIP }} ${{ matrix.config }}
          
          echo "============== 编译产物处理完成 =============="

      - name: 上传固件到Artifacts
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-firmware
          path: /tmp/artifact/firmware/
          retention-days: 7

      - name: 上传配置到Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-config
          path: /tmp/artifact/config/
          retention-days: 7

      - name: 上传日志到Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-logs
          path: /tmp/artifact/logs/
          retention-days: 7

      - name: 上传软件包到Artifacts
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.branch }}-${{ env.CHIP }}-${{ matrix.config }}-packages
          path: /workdir/openwrt/bin/targets/*/packages/
          retention-days: 7

      - name: 启用SSH连接
        uses: mxschmitt/action-tmate@v3
        if: github.event.inputs.ssh == 'true' && steps.compile.outputs.status == 'failed'
        timeout-minutes: 30

  # 发布Release
  release:
    name: 发布Release
    needs: build
    if: ${{ success() && github.event.inputs.branch == 'all' }}
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: 准备发布文件
        run: |
          echo "============== 开始准备发布文件 =============="
          
          # 创建发布目录
          mkdir -p ./release
          
          # 处理固件文件
          find ./artifacts -name "*.bin" -exec cp {} ./release/ \;
          
          # 打包配置文件
          mkdir -p ./temp_config
          cp -r ./artifacts/*config* ./temp_config/ 2>/dev/null || true
          tar -czf ./release/${{ env.CHIP }}-config.tar.gz -C ./temp_config .
          
          # 打包日志文件
          mkdir -p ./temp_logs
          cp -r ./artifacts/*logs* ./temp_logs/ 2>/dev/null || true
          tar -czf ./release/${{ env.CHIP }}-log.tar.gz -C ./temp_logs .
          
          # 打包软件包
          mkdir -p ./temp_packages
          cp -r ./artifacts/*packages* ./temp_packages/ 2>/dev/null || true
          tar -czf ./release/${{ env.CHIP }}-app.tar.gz -C ./temp_packages .
          
          # 获取软件包列表
          APP_LIST=$(find ./temp_packages -name "*.ipk" -o -name "*.apk" | sort | uniq | sed 's/.*\///g' | sed 's/_.*.ipk//g' | sed 's/_.*.apk//g' | grep -E "^luci-app-" | sort | uniq)
          echo "APP_LIST<<EOF" >> $GITHUB_ENV
          echo "$APP_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # 获取日期
          RELEASE_DATE=$(date +"%Y-%m-%d")
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV
          
          echo "============== 发布文件准备完成 =============="

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_DATE }}-${{ env.CHIP }}
          name: ${{ env.RELEASE_DATE }} ${{ env.CHIP }} 固件发布
          body: |
            ### 固件信息
            - 默认管理地址：192.168.111.1
            - 默认用户：root
            - 默认密码：none
            - 默认WIFI密码: 12345678
            
            ### 设备支持
            - 固件包括 ${{ env.CHIP }} 的京东云亚瑟、雅典娜
            - 固件内核版本：${{ env.VERSION_KERNEL }}
            
            ### 编译信息
            - 作者: Mary
            - 发布时间: ${{ env.RELEASE_DATE }}
            
            ### 包含的luci-app列表
            ```
            ${{ env.APP_LIST }}
            ```
          files: |
            ./release/*
          draft: false
          prerelease: false
