name: IPQ-LAI-sc脚本

on:
  schedule:
    # 北京时间周五0点 = UTC时间周四16:00
    - cron: '0 16 * * 4'
  workflow_dispatch:

permissions:
  contents: write

env:
  # 芯片变量（未来可扩展）
  CHIP: ipq60xx
  
  # 默认信息
  DEFAULT_IP: 192.168.111.1
  DEFAULT_USER: root
  DEFAULT_PASS: none
  DEFAULT_WIFI: 12345678
  AUTHOR: Mary

jobs:
  # 构建所有配置
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 配置类型在前，仓库在后
        config_type: [Ultra, Max, Pro]
        repo: 
          - imm|${{ github.server_url }}/laipeng668/immortalwrt.git|master|immwrt
          - open|${{ github.server_url }}/laipeng668/openwrt.git|master|openwrt
          - lib|${{ github.server_url }}/laipeng668/openwrt-6.x.git|k6.12-nss|libwrt
      max-parallel: 3
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置仓库环境变量
        run: |
          set -e
          IFS='|' read -r REPO_KEY REPO_URL REPO_BRANCH REPO_SHORT <<< "${{ matrix.repo }}"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "REPO_SHORT=${REPO_SHORT}" >> $GITHUB_ENV
          echo "CONFIG_TYPE=${{ matrix.config_type }}" >> $GITHUB_ENV
          
      - name: 初始化日志
        run: |
          set -e
          mkdir -p logs
          echo "构建开始: ${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ matrix.config_type }}" > logs/error.log
          echo "构建时间: $(date)" >> logs/error.log
          
      - name: 清理工作目录
        run: |
          set -e
          rm -rf openwrt temp_config
          
      # 缓存策略
      - name: 缓存feeds目录
        id: cache-feeds
        uses: actions/cache@v4
        with:
          path: openwrt/feeds
          key: feeds-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            feeds-
          
      - name: 缓存下载目录
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            dl-
            
      - name: 缓存ccache
        id: cache-ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ github.run_id }}
          restore-keys: |
            ccache-
            
      - name: 缓存工具链目录
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: openwrt/build_dir/toolchain-*
          key: toolchain-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            toolchain-
            
      - name: 缓存staging目录
        id: cache-staging
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir
          key: staging-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            staging-
          
      - name: 显示缓存状态
        run: |
          echo "缓存状态:"
          echo "- feeds: ${{ steps.cache-feeds.outputs.cache-hit }}"
          echo "- dl: ${{ steps.cache-dl.outputs.cache-hit }}"
          echo "- ccache: ${{ steps.cache-ccache.outputs.cache-hit }}"
          echo "- toolchain: ${{ steps.cache-toolchain.outputs.cache-hit }}"
          echo "- staging: ${{ steps.cache-staging.outputs.cache-hit }}"
          
      - name: 合并配置文件
        run: |
          set -e
          mkdir -p temp_config
          cat configs/${{ env.CHIP }}_base.config > temp_config/.config
          cat configs/${{ env.REPO_SHORT }}_base.config >> temp_config/.config
          cat configs/${{ matrix.config_type }}.config >> temp_config/.config
          
          if [ ! -s temp_config/.config ]; then
            echo "错误：配置文件合并失败" >> logs/error.log
            exit 1
          fi
          
      - name: 提取设备信息
        run: |
          set -e
          DEVICE_LINES=$(grep '^CONFIG_TARGET_DEVICE_.*=y$' temp_config/.config)
          if [ -z "$DEVICE_LINES" ]; then
            echo "错误：配置文件中未找到启用的设备" >> logs/error.log
            exit 1
          fi
          
          DEVICE_NAMES=""
          for line in $DEVICE_LINES; do
            DEVICE_NAME=$(echo "$line" | sed -n 's/^CONFIG_TARGET_DEVICE_[^_]*_[^_]*_DEVICE_\([^=]*\)=y/\1/p')
            if [ -n "$DEVICE_NAME" ]; then
              DEVICE_NAMES="$DEVICE_NAMES $DEVICE_NAME"
            fi
          done
          
          DEVICE_COUNT=$(echo "$DEVICE_NAMES" | wc -w)
          if [ "$DEVICE_COUNT" -eq 0 ]; then
            echo "错误：无法从配置文件中提取设备名称" >> logs/error.log
            exit 1
          fi
          
          echo "DEVICE_NAMES=${DEVICE_NAMES}" >> $GITHUB_ENV
          echo "设备数量: $DEVICE_COUNT" >> logs/error.log
          
      - name: 检查系统依赖
        run: |
          set -e
          echo "检查系统依赖..." >> logs/error.log
          dpkg -l | grep -E "build-essential|clang|flex|bison|g\+\+|gawk|gcc-multilib|g\+\+-multilib|gettext|git|libncurses5-dev|libssl-dev|python3-distutils|python3-setuptools|rsync|unzip|zlib1g-dev|file|wget" >> logs/error.log
          which gcc g++ make git python3 >> logs/error.log
          
      - name: 克隆源码
        run: |
          set -e
          echo "克隆源码..." >> logs/error.log
          git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
          
      - name: 安装依赖
        run: |
          set -e
          cd openwrt
          echo "安装依赖..." >> ../logs/error.log
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-setuptools rsync unzip zlib1g-dev file wget
          
      - name: 执行自定义脚本
        run: |
          set -e
          cd openwrt
          echo "执行自定义脚本..." >> ../logs/error.log
          chmod +x ../scripts/script.sh
          ../scripts/script.sh >> ../logs/error.log 2>&1
          
      - name: 编译固件
        run: |
          set -e
          cd openwrt
          
          # 应用配置
          cp ../temp_config/.config .config
          
          # 添加缺失的内核配置选项
          echo "# CONFIG_NF_CONNTRACK_DSCPREMARK_EXT is not set" >> .config
          
          # 验证配置文件
          echo "验证配置文件..." >> ../logs/error.log
          grep -E "CONFIG_TARGET_DEVICE_|CONFIG_LINUX_KERNEL_VERSION|CONFIG_NF_CONNTRACK_DSCPREMARK_EXT" .config >> ../logs/error.log
          
          echo "运行defconfig..." >> ../logs/error.log
          make defconfig >> ../logs/error.log 2>&1
          
          # 再次确认新选项被禁用
          echo "# CONFIG_NF_CONNTRACK_DSCPREMARK_EXT is not set" >> .config
          
          # 启用ccache
          export CCACHE_DIR=~/.ccache
          export USE_CCACHE=1
          export CCACHE_COMPRESS=1
          
          # 编译 - 减少输出但保留进度信息
          echo "开始编译..." >> ../logs/error.log
          echo "使用 $(nproc) 个并行任务进行编译" >> ../logs/error.log
          
          # 创建临时文件记录编译输出
          COMPILE_LOG=$(mktemp)
          PROGRESS_LOG=$(mktemp)
          
          # 显示编译进度
          echo "编译进度:" > "$PROGRESS_LOG"
          
          # 后台进程监控编译进度
          (
            while true; do
              if [ -f "$COMPILE_LOG" ]; then
                echo "$(date): 编译进行中..." >> "$PROGRESS_LOG"
                # 查找关键进度信息
                grep -a "CC\|LD\|AR\|GEN" "$COMPILE_LOG" | tail -5 >> "$PROGRESS_LOG" 2>/dev/null || true
              fi
              sleep 30
            done
          ) &
          PROGRESS_PID=$!
          
          # 尝试编译，捕获错误
          if ! make -j$(nproc) V=s 2>&1 | tee "$COMPILE_LOG"; then
            echo "错误：并行编译失败，尝试使用单线程重新编译..." >> ../logs/error.log
            
            # 记录最后1000行编译输出
            echo "=== 最后1000行编译输出 ===" >> ../logs/error.log
            tail -n 1000 "$COMPILE_LOG" >> ../logs/error.log
            
            # 尝试单线程编译
            if ! make -j1 V=sc 2>&1 | tee "$COMPILE_LOG"; then
              echo "错误：单线程编译也失败" >> ../logs/error.log
              
              # 记录最后2000行编译输出
              echo "=== 最后2000行编译输出 ===" >> ../logs/error.log
              tail -n 2000 "$COMPILE_LOG" >> ../logs/error.log
              
              # 查找关键错误信息
              echo "=== 关键错误信息 ===" >> ../logs/error.log
              grep -i -A 5 -B 5 "error\|Error\|ERROR\|failed\|Failed\|FAILED" "$COMPILE_LOG" | head -50 >> ../logs/error.log
              
              kill $PROGRESS_PID 2>/dev/null || true
              rm -f "$COMPILE_LOG" "$PROGRESS_LOG"
              exit 1
            fi
          fi
          
          # 停止进度监控
          kill $PROGRESS_PID 2>/dev/null || true
          
          # 记录编译进度日志
          echo "=== 编译进度日志 ===" >> ../logs/error.log
          cat "$PROGRESS_LOG" >> ../logs/error.log
          
          rm -f "$COMPILE_LOG" "$PROGRESS_LOG"
          echo "编译完成" >> ../logs/error.log
          
      - name: 生成编译摘要
        if: always()
        run: |
          set -e
          echo "=== 编译摘要 ===" > logs/summary.log
          
          # 记录基本信息
          echo "仓库: ${{ env.REPO_SHORT }}" >> logs/summary.log
          echo "配置: ${{ matrix.config_type }}" >> logs/summary.log
          echo "芯片: ${{ env.CHIP }}" >> logs/summary.log
          echo "开始时间: $(date)" >> logs/summary.log
          
          # 检查编译结果
          TARGET_DIR="openwrt/bin/targets/${{ env.CHIP }}"
          if [ -d "$TARGET_DIR" ] && [ -f "$TARGET_DIR/"*.bin ]; then
            echo "编译状态: 成功" >> logs/summary.log
            echo "生成的固件:" >> logs/summary.log
            ls -la "$TARGET_DIR"/*.bin | grep squashfs >> logs/summary.log
          else
            echo "编译状态: 失败" >> logs/summary.log
            echo "请查看错误日志了解详情" >> logs/summary.log
          fi
          
          echo "结束时间: $(date)" >> logs/summary.log
          echo "=== 编译摘要 ===" >> logs/summary.log
          
      - name: 收集产物
        if: always()
        run: |
          set -e
          ARTIFACT_DIR="${{ env.REPO_SHORT }}-${{ matrix.config_type }}"
          FIRMWARE_DIR="${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware"
          mkdir -p "$ARTIFACT_DIR"
          mkdir -p "$FIRMWARE_DIR"
          
          # 修改后的TARGET_DIR，支持多种架构
          TARGET_DIR="openwrt/bin/targets/${{ env.CHIP }}"
          
          # 复制配置文件
          cp temp_config/.config "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.config"
          
          # 复制其他文件
          if [ -f "openwrt/.config.buildinfo" ]; then
            cp openwrt/.config.buildinfo "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.config.buildinfo"
          fi
          
          if [ -d "$TARGET_DIR" ] && [ -f "$TARGET_DIR"/*.manifest ]; then
            cp "$TARGET_DIR"/*.manifest "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.manifest"
          fi
          
          if [ -f "openwrt/build.log" ]; then
            cp openwrt/build.log "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}-build.log"
          fi
          
          if [ -d "openwrt/bin/packages" ]; then
            mkdir -p "$ARTIFACT_DIR/packages"
            cp -r openwrt/bin/packages/* "$ARTIFACT_DIR/packages/"
          fi
          
          if [ -f logs/error.log ] && [ -s logs/error.log ]; then
            cp logs/error.log "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}-error.log"
          fi
          
          if [ -f logs/summary.log ] && [ -s logs/summary.log ]; then
            cp logs/summary.log "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}-summary.log"
          fi
          
          # 处理固件文件 - 只处理包含"-squashfs-"的文件
          if [ -d "$TARGET_DIR" ]; then
            FOUND_FIRMWARE=0
            
            for file in "$TARGET_DIR"/*.bin; do
              if [ -f "$file" ] && [[ "$file" == *"-squashfs-"* ]]; then
                FOUND_FIRMWARE=1
                
                # 从文件名提取设备名称
                DEVICE_NAME_FROM_FILE=$(basename "$file" | sed -n 's/^.*-\(.*\)-squashfs-.*\.bin$/\1/p')
                
                if [ -z "$DEVICE_NAME_FROM_FILE" ]; then
                  echo "警告：无法从文件名中提取设备名称: $(basename "$file")" >> logs/error.log
                  continue
                fi
                
                # 确定固件类型
                if [[ "$file" == *"factory"* ]]; then
                  FIRMWARE_TYPE="factory"
                elif [[ "$file" == *"sysupgrade"* ]]; then
                  FIRMWARE_TYPE="sysupgrade"
                else
                  continue
                fi
                
                NEW_NAME="${{ env.REPO_SHORT }}-${DEVICE_NAME_FROM_FILE}-${FIRMWARE_TYPE}-${{ matrix.config_type }}.bin"
                cp "$file" "$FIRMWARE_DIR/$NEW_NAME"
              fi
            done
            
            if [ "$FOUND_FIRMWARE" -eq 0 ]; then
              echo "警告: 没有找到任何符合条件的固件文件（包含-squashfs-的.bin文件）" >> logs/error.log
              # 创建一个说明文件，避免上传错误
              echo "没有找到符合条件的固件文件（包含-squashfs-的.bin文件）" > "$FIRMWARE_DIR/no-firmware-found.txt"
            fi
          else
            echo "错误: 目标目录不存在: $TARGET_DIR" >> logs/error.log
            # 创建一个说明文件，避免上传错误
            echo "目标目录不存在: $TARGET_DIR" > "$FIRMWARE_DIR/target-directory-not-found.txt"
          fi
          
      - name: 上传编译摘要
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ env.REPO_SHORT }}-${{ matrix.config_type }}
          path: |
            logs/summary.log
          retention-days: 30
          if-no-files-found: warn
          
      - name: 上传错误日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-${{ env.REPO_SHORT }}-${{ matrix.config_type }}
          path: |
            logs/error.log
          retention-days: 30
          if-no-files-found: warn
          
      - name: 上传产物
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ matrix.config_type }}
          path: |
            ${{ env.REPO_SHORT }}-${{ matrix.config_type }}/
          retention-days: 7
          if-no-files-found: warn
          
      - name: 上传固件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware
          path: |
            ${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware/
          retention-days: 7
          if-no-files-found: error

  # 打包并发布Release
  package-and-release:
    needs: build
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/
          
      - name: 准备发布目录
        run: |
          set -e
          mkdir -p release/{config,log,app,firmware,assets}
          
          # 收集配置文件
          find all-artifacts -name "*.config" -exec cp {} release/config/ \;
          find all-artifacts -name "*.config.buildinfo" -exec cp {} release/config/ \;
          find all-artifacts -name "*.manifest" -exec cp {} release/config/ \;
          
          # 收集日志文件
          find all-artifacts -name "*-build.log" -exec cp {} release/log/ \;
          find all-artifacts -name "*-error.log" -exec cp {} release/log/ \;
          find all-artifacts -name "*-summary.log" -exec cp {} release/log/ \;
          
          # 收集软件包
          find all-artifacts -name "packages" -type d -exec cp -r {} release/app/ \;
          
          # 收集固件文件
          find all-artifacts -name "*.bin" -exec cp {} release/firmware/ \;
          
          # 打包文件
          tar -czf release/${{ env.CHIP }}-config.tar.gz -C release/config .
          tar -czf release/${{ env.CHIP }}-log.tar.gz -C release/log .
          tar -czf release/${{ env.CHIP }}-app.tar.gz -C release/app .
          
          # 复制到assets目录
          cp release/${{ env.CHIP }}-config.tar.gz release/assets/
          cp release/${{ env.CHIP }}-log.tar.gz release/assets/
          cp release/${{ env.CHIP }}-app.tar.gz release/assets/
          cp release/firmware/*.bin release/assets/ 2>/dev/null || true
          
          # 提取信息
          KERNEL_VERSION=""
          LUCI_APPS=""
          DEVICE_LIST=""
          
          for config_file in release/config/*.config; do
            KERNEL_VER=$(grep "^CONFIG_LINUX_KERNEL_VERSION=" "$config_file" | cut -d'"' -f2)
            if [ -n "$KERNEL_VER" ]; then
              KERNEL_VERSION="$KERNEL_VER"
              break
            fi
          done
          
          if [ -d release/app ]; then
            LUCI_APPS=$(find release/app -name "luci-app-*.ipk" | sed 's/.*\///g' | sort | uniq | tr '\n' ' ')
          fi
          
          if [ -d release/firmware ]; then
            DEVICE_LIST=$(ls release/firmware/*.bin | sed -n 's/.*-\([^-]*\)-.*\.bin/\1/p' | sort | uniq | tr '\n' ' ')
          fi
          
          echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV
          echo "LUCI_APPS=${LUCI_APPS}" >> $GITHUB_ENV
          echo "DEVICE_LIST=${DEVICE_LIST}" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
          
          # 创建用户友好的README文件
          cat > release/README.md << EOF
          # ${{ env.CHIP }} 固件发布说明
          
          ## 基本信息
          - 发布日期: ${{ env.RELEASE_DATE }}
          - 内核版本: ${{ env.KERNEL_VERSION }}
          - 支持设备: ${{ env.DEVICE_LIST }}
          
          ## 默认设置
          - 管理地址: ${{ env.DEFAULT_IP }}
          - 用户名: ${{ env.DEFAULT_USER }}
          - 密码: ${{ env.DEFAULT_PASS }}
          - WiFi密码: ${{ env.DEFAULT_WIFI }}
          
          ## 下载说明
          ### 固件文件
          固件文件命名规则: [仓库简称]-[设备名称]-[固件类型]-[配置类型].bin
          
          例如:
          - imm-device1-factory-Ultra.bin (适用于设备1的工厂固件)
          - imm-device1-sysupgrade-Ultra.bin (适用于设备1的升级固件)
          
          请根据您的设备型号选择对应的固件文件。
          
          ### 其他文件
          - ${{ env.CHIP }}-config.tar.gz: 配置文件
          - ${{ env.CHIP }}-log.tar.gz: 编译日志
          - ${{ env.CHIP }}-app.tar.gz: 软件包
          
          ## 安装说明
          1. 下载适用于您设备的固件文件
          2. 通过设备管理界面或TFTP方式刷入固件
          3. 刷入后使用默认设置登录设备
          
          ## 注意事项
          - 刷入固件前请备份重要数据
          - 确保下载与您的设备型号完全匹配的固件
          - 刷入过程中请勿断电
          
          ## 技术支持
          如遇问题，请参考编译日志或联系作者: ${{ env.AUTHOR }}
          EOF
          
          # 创建Release body文件
          cat > release/body.md << EOF
          默认管理地址：${{ env.DEFAULT_IP }}
          默认用户：${{ env.DEFAULT_USER }}
          默认密码：${{ env.DEFAULT_PASS }}
          默认WIFI密码: ${{ env.DEFAULT_WIFI }}
          
          固件包括（${{ env.CHIP }}）的设备：${{ env.DEVICE_LIST }}
          
          固件内核版本：${{ env.KERNEL_VERSION }}
          作者: ${{ env.AUTHOR }}
          发布时间: ${{ env.RELEASE_DATE }}
          编译的luci-app列表：${{ env.LUCI_APPS }}
          
          ## 下载说明
          - 固件文件：请从下面的附件中下载对应设备的固件文件
          - 配置文件：${{ env.CHIP }}-config.tar.gz
          - 编译日志：${{ env.CHIP }}-log.tar.gz
          - 软件包：${{ env.CHIP }}-app.tar.gz
          - 用户手册：README.md
          EOF
          
      - name: 创建Release并上传文件
        uses: softprops/action-gh-release@v1
        if: always()
        with:
          tag_name: ${{ env.RELEASE_DATE }}-${{ env.CHIP }}
          name: ${{ env.CHIP }} Release ${{ env.RELEASE_DATE }}
          body_path: release/body.md
          files: |
            release/assets/*
            release/README.md
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
