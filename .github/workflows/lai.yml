name: IPQ-LAI

on:
  schedule:
    # 北京时间周五0点 = UTC时间周四16:00
    - cron: '0 16 * * 4'
  workflow_dispatch:

# 设置artifact保留天数
artifact-retention-days: 7

permissions:
  contents: write

env:
  # 芯片变量（未来可扩展）
  CHIP: ipq60xx
  # 仓库配置
  REPOS: |
    imm|${{ github.server_url }}/laipeng668/immortalwrt.git|master|immwrt
    open|${{ github.server_url }}/laipeng668/openwrt.git|master|openwrt
    lib|${{ github.server_url }}/laipeng668/openwrt-6.x.git|k6.12-nss|libwrt
  
  # 配置类型（按优先级排序）
  CONFIG_TYPES: Ultra Max Pro
  
  # 默认信息
  DEFAULT_IP: 192.168.111.1
  DEFAULT_USER: root
  DEFAULT_PASS: none
  DEFAULT_WIFI: 12345678
  AUTHOR: Mary

jobs:
  # 构建所有配置（按优先级顺序）
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 解析仓库配置
        repo: ${{ fromJson(env.REPOS) }}
        config_type: ${{ fromJson(env.CONFIG_TYPES) }}
        # 未来可扩展其他芯片
        # chip: [ipq60xx, ipq80xx, mtk]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置仓库环境变量
        run: |
          set -e
          IFS='|' read -r REPO_KEY REPO_URL REPO_BRANCH REPO_SHORT <<< "${{ matrix.repo }}"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "REPO_SHORT=${REPO_SHORT}" >> $GITHUB_ENV
          echo "CONFIG_TYPE=${{ matrix.config_type }}" >> $GITHUB_ENV
          
      - name: 初始化错误日志
        run: |
          set -e
          mkdir -p logs
          echo "=== 构建开始: ${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ matrix.config_type }} ===" > logs/error.log
          
      - name: 缓存下载目录（同分支通用）
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            dl-${{ env.REPO_SHORT }}-${{ env.CHIP }}-
        continue-on-error: true
          
      - name: 缓存feeds目录（全矩阵通用）
        uses: actions/cache@v4
        with:
          path: openwrt/feeds
          key: feeds-${{ hashFiles('configs/*.config') }}
          restore-keys: |
            feeds-
        continue-on-error: true
          
      - name: 合并配置文件
        run: |
          set -e
          # 创建临时目录
          mkdir -p openwrt
          
          # 按优先级合并配置：芯片基础配置 + 分支基础配置 + 软件包配置
          cat configs/${{ env.CHIP }}_base.config > openwrt/.config
          cat configs/${{ env.REPO_SHORT }}_base.config >> openwrt/.config
          cat configs/${{ env.CONFIG_TYPE }}.config >> openwrt/.config
          
          # 验证配置文件合并成功
          if [ ! -s openwrt/.config ]; then
            echo "错误：配置文件合并失败" >> logs/error.log
            exit 1
          fi
        continue-on-error: true
          
      - name: 提取设备信息
        run: |
          set -e
          # 从配置文件中提取设备名称
          DEVICE_NAME=$(grep '^CONFIG_TARGET_PROFILE=' openwrt/.config | cut -d'"' -f2)
          if [ -z "$DEVICE_NAME" ]; then
            echo "错误：无法从配置文件中提取设备名称" >> logs/error.log
            exit 1
          fi
          echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV
          
          # 提取目标架构信息
          TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' openwrt/.config | cut -d'"' -f2)
          TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' openwrt/.config | cut -d'"' -f2)
          if [ -z "$TARGET_BOARD" ] || [ -z "$TARGET_SUBTARGET" ]; then
            echo "错误：无法从配置文件中提取目标架构信息" >> logs/error.log
            exit 1
          fi
          echo "TARGET_BOARD=${TARGET_BOARD}" >> $GITHUB_ENV
          echo "TARGET_SUBTARGET=${TARGET_SUBTARGET}" >> $GITHUB_ENV
        continue-on-error: true
          
      - name: 克隆源码
        run: |
          set -e
          git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        continue-on-error: true
          
      - name: 更新feeds
        run: |
          set -e
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
        continue-on-error: true
          
      - name: 编译固件
        run: |
          set -e
          cd openwrt
          
          # 应用配置
          cp ../openwrt/.config .config
          make defconfig
          
          # 编译（严格错误检查）
          make -j$(nproc) 2>&1 | tee build.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "错误：编译失败" >> ../logs/error.log
            exit 1
          fi
        continue-on-error: true
          
      - name: 收集产物
        run: |
          set -e
          # 创建临时目录
          ARTIFACT_DIR="${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}"
          mkdir -p "$ARTIFACT_DIR"
          
          # 定义目标目录
          TARGET_DIR="openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}"
          
          # 复制固件并重命名
          for file in "$TARGET_DIR"/*.bin; do
            if [ -f "$file" ]; then
              # 提取固件类型（factory/sysupgrade）
              if [[ "$file" == *"factory"* ]]; then
                FIRMWARE_TYPE="factory"
              elif [[ "$file" == *"sysupgrade"* ]]; then
                FIRMWARE_TYPE="sysupgrade"
              else
                continue
              fi
              
              # 重命名规则：分支缩写-芯片变量-设备名称-固件类型-配置.bin
              NEW_NAME="${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${FIRMWARE_TYPE}-${{ env.CONFIG_TYPE }}.bin"
              cp "$file" "$ARTIFACT_DIR/$NEW_NAME"
            fi
          done
          
          # 复制配置文件并重命名
          cp openwrt/.config "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}.config"
          cp openwrt/.config.buildinfo "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}.config.buildinfo"
          
          # 复制manifest文件
          if [ -f "$TARGET_DIR"/*.manifest ]; then
            cp "$TARGET_DIR"/*.manifest "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}.manifest"
          fi
          
          # 复制日志
          cp openwrt/build.log "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}-build.log"
          
          # 复制软件包（允许覆盖）
          if [ -d openwrt/bin/packages ]; then
            mkdir -p "$ARTIFACT_DIR/packages"
            cp -r openwrt/bin/packages/* "$ARTIFACT_DIR/packages/"
          fi
          
          # 复制错误日志（如果有）
          if [ -f logs/error.log ] && [ -s logs/error.log ]; then
            cp logs/error.log "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}-error.log"
          fi
        continue-on-error: true
          
      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}
          path: |
            ${{ env.REPO_SHORT }}-${{ env.CHIP }}-${{ env.DEVICE_NAME }}-${{ env.CONFIG_TYPE }}/
            logs/
          if-no-files-found: error
          
  # 打包并发布Release
  package-and-release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/
          
      - name: 准备发布目录
        run: |
          set -e
          mkdir -p release/{config,log,app,error}
          
          # 收集配置文件
          find all-artifacts -name "*.config" -exec cp {} release/config/ \;
          find all-artifacts -name "*.config.buildinfo" -exec cp {} release/config/ \;
          find all-artifacts -name "*.manifest" -exec cp {} release/config/ \;
          
          # 收集日志文件
          find all-artifacts -name "*-build.log" -exec cp {} release/log/ \;
          
          # 收集错误日志
          find all-artifacts -name "*-error.log" -exec cp {} release/error/ \;
          
          # 收集软件包（允许覆盖重名文件）
          find all-artifacts -name "packages" -type d -exec cp -r {} release/app/ \;
          
          # 打包配置文件
          tar -czf release/${{ env.CHIP }}-config.tar.gz -C release/config .
          
          # 打包日志文件
          tar -czf release/${{ env.CHIP }}-log.tar.gz -C release/log .
          
          # 打包错误日志
          if [ -d release/error ] && [ "$(ls -A release/error)" ]; then
            tar -czf release/${{ env.CHIP }}-error.tar.gz -C release/error .
          fi
          
          # 打包软件包
          tar -czf release/${{ env.CHIP }}-app.tar.gz -C release/app .
          
          # 提取内核版本和软件包列表
          KERNEL_VERSION=""
          LUCI_APPS=""
          
          # 从任意一个配置文件中提取内核版本
          for config_file in release/config/*.config; do
            KERNEL_VER=$(grep "^CONFIG_LINUX_KERNEL_VERSION=" "$config_file" | cut -d'"' -f2)
            if [ -n "$KERNEL_VER" ]; then
              KERNEL_VERSION="$KERNEL_VER"
              break
            fi
          done
          
          # 从软件包目录中提取luci-app列表
          if [ -d release/app ]; then
            LUCI_APPS=$(find release/app -name "luci-app-*.ipk" | sed 's/.*\///g' | sort | uniq | tr '\n' ' ')
          fi
          
          # 设置环境变量供Release使用
          echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV
          echo "LUCI_APPS=${LUCI_APPS}" >> $GITHUB_ENV
          
          # 获取当前日期
          echo "RELEASE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
          
      - name: 创建Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_DATE }}-${{ env.CHIP }}
          release_name: ${{ env.CHIP }} Release ${{ env.RELEASE_DATE }}
          body: |
            默认管理地址：${{ env.DEFAULT_IP }}
            默认用户：${{ env.DEFAULT_USER }}
            默认密码：${{ env.DEFAULT_PASS }}
            默认WIFI密码: ${{ env.DEFAULT_WIFI }}
            
            固件包括（${{ env.CHIP }}）的京东云亚瑟、雅典娜
            
            固件内核版本：${{ env.KERNEL_VERSION }}
            作者: ${{ env.AUTHOR }}
            发布时间: ${{ env.RELEASE_DATE }}
            编译的luci-app列表：${{ env.LUCI_APPS }}
            
            ## 下载说明
            - 固件文件：分支缩写-芯片变量-设备名称-固件类型-配置.bin
            - 配置文件：${{ env.CHIP }}-config.tar.gz
            - 编译日志：${{ env.CHIP }}-log.tar.gz
            - 错误日志：${{ env.CHIP }}-error.tar.gz
            - 软件包：${{ env.CHIP }}-app.tar.gz
          draft: false
          prerelease: false
          
      - name: 上传配置文件包
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.CHIP }}-config.tar.gz
          asset_name: ${{ env.CHIP }}-config.tar.gz
          asset_content_type: application/gzip
          
      - name: 上传日志包
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.CHIP }}-log.tar.gz
          asset_name: ${{ env.CHIP }}-log.tar.gz
          asset_content_type: application/gzip
          
      - name: 上传错误日志包（如果有）
        if: hashFiles('release/${{ env.CHIP }}-error.tar.gz') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.CHIP }}-error.tar.gz
          asset_name: ${{ env.CHIP }}-error.tar.gz
          asset_content_type: application/gzip
          
      - name: 上传软件包
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.CHIP }}-app.tar.gz
          asset_name: ${{ env.CHIP }}-app.tar.gz
          asset_content_type: application/gzip
