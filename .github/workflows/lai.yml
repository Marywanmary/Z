name: IPQ-LAI

on:
  schedule:
    # 北京时间周五0点 = UTC时间周四16:00
    - cron: '0 16 * * 4'
  workflow_dispatch:

permissions:
  contents: write

env:
  # 芯片变量（未来可扩展）
  CHIP: ipq60xx
  
  # 默认信息
  DEFAULT_IP: 192.168.111.1
  DEFAULT_USER: root
  DEFAULT_PASS: none
  DEFAULT_WIFI: 12345678
  AUTHOR: Mary

jobs:
  # 构建所有配置
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 配置类型在前，仓库在后
        config_type: [Ultra, Max, Pro]
        repo: 
          - imm|${{ github.server_url }}/laipeng668/immortalwrt.git|master|immwrt
          - open|${{ github.server_url }}/laipeng668/openwrt.git|master|openwrt
          - lib|${{ github.server_url }}/laipeng668/openwrt-6.x.git|k6.12-nss|libwrt
      max-parallel: 3
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 初始化日志系统
        run: |
          set -e
          echo "🔧 初始化日志系统..."
          
          # 确保日志目录存在
          mkdir -p logs
          
          # 创建用户友好摘要日志
          echo "=== IPQ60xx 固件编译摘要 ===" > logs/summary.log
          echo "开始时间: $(date)" >> logs/summary.log
          echo "配置类型: ${{ matrix.config_type }}" >> logs/summary.log
          echo "仓库: ${{ matrix.repo }}" >> logs/summary.log
          echo "" >> logs/summary.log
          
          # 创建详细技术日志
          echo "=== 详细技术日志 ===" > logs/technical.log
          echo "开始时间: $(date)" >> logs/technical.log
          
          # 创建编译进度日志
          echo "=== 编译进度 ===" > logs/progress.log
          
          echo "✅ 日志系统初始化完成"
          
      - name: 设置仓库环境变量
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          
          echo "🔄 设置仓库环境变量..." | tee -a logs/summary.log
          
          IFS='|' read -r REPO_KEY REPO_URL REPO_BRANCH REPO_SHORT <<< "${{ matrix.repo }}"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "REPO_SHORT=${REPO_SHORT}" >> $GITHUB_ENV
          echo "CONFIG_TYPE=${{ matrix.config_type }}" >> $GITHUB_ENV
          
          echo "仓库信息: $REPO_SHORT ($REPO_BRANCH)" >> logs/technical.log
          echo "✅ 仓库信息: $REPO_SHORT ($REPO_BRANCH)" | tee -a logs/summary.log
          echo "" >> logs/summary.log
          
      - name: 清理工作目录
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          
          echo "🔄 清理工作目录..." | tee -a logs/summary.log
          
          # 强制删除目录
          echo "删除 openwrt 目录..." >> logs/technical.log
          rm -rf openwrt
          
          echo "删除 temp_config 目录..." >> logs/technical.log
          rm -rf temp_config
          
          # 验证目录已删除
          if [ -d "openwrt" ]; then
            echo "❌ 错误: openwrt 目录仍然存在" | tee -a logs/summary.log
            exit 1
          fi
          
          if [ -d "temp_config" ]; then
            echo "❌ 错误: temp_config 目录仍然存在" | tee -a logs/summary.log
            exit 1
          fi
          
          echo "✅ 工作目录已清理" | tee -a logs/summary.log
          echo "" >> logs/summary.log
          
      # 缓存步骤
      - name: 缓存feeds目录
        uses: actions/cache@v4
        with:
          path: openwrt/feeds
          key: feeds-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            feeds-
          
      - name: 缓存下载目录
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            dl-
            
      - name: 缓存ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ github.run_id }}
          restore-keys: |
            ccache-
            
      - name: 缓存工具链目录
        uses: actions/cache@v4
        with:
          path: openwrt/build_dir/toolchain-*
          key: toolchain-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            toolchain-
            
      - name: 缓存staging目录
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir
          key: staging-${{ hashFiles('configs/${{ env.CHIP }}_base.config', 'configs/${{ env.REPO_SHORT }}_base.config') }}
          restore-keys: |
            staging-
          
      - name: 合并配置文件
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          
          echo "🔄 合并配置文件..." | tee -a logs/summary.log
          
          mkdir -p temp_config
          cat configs/${{ env.CHIP }}_base.config > temp_config/.config
          cat configs/${{ env.REPO_SHORT }}_base.config >> temp_config/.config
          cat configs/${{ matrix.config_type }}.config >> temp_config/.config
          
          if [ ! -s temp_config/.config ]; then
            echo "❌ 错误：配置文件合并失败" | tee -a logs/summary.log
            exit 1
          fi
          
          # 提取设备信息
          DEVICE_LINES=$(grep '^CONFIG_TARGET_DEVICE_.*=y$' temp_config/.config)
          DEVICE_NAMES=""
          for line in $DEVICE_LINES; do
            DEVICE_NAME=$(echo "$line" | sed -n 's/^CONFIG_TARGET_DEVICE_[^_]*_[^_]*_DEVICE_\([^=]*\)=y/\1/p')
            if [ -n "$DEVICE_NAME" ]; then
              DEVICE_NAMES="$DEVICE_NAMES $DEVICE_NAME"
            fi
          done
          
          echo "DEVICE_NAMES=${DEVICE_NAMES}" >> $GITHUB_ENV
          echo "✅ 配置文件合并成功，目标设备: $DEVICE_NAMES" | tee -a logs/summary.log
          echo "" >> logs/summary.log
          
      - name: 克隆源码
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          
          echo "🔄 克隆源码..." | tee -a logs/summary.log
          echo "仓库: ${{ env.REPO_URL }}" >> logs/technical.log
          echo "分支: ${{ env.REPO_BRANCH }}" >> logs/technical.log
          
          # 检查并删除已存在的openwrt目录
          if [ -d "openwrt" ]; then
            echo "发现已存在的openwrt目录，正在删除..." >> logs/technical.log
            rm -rf openwrt
            if [ -d "openwrt" ]; then
              echo "❌ 错误: 无法删除openwrt目录" | tee -a logs/summary.log
              exit 1
            fi
          fi
          
          # 克隆源码
          echo "开始克隆源码..." >> logs/technical.log
          git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt 2>&1 | tee -a logs/technical.log
          
          # 验证克隆结果
          if [ ! -d "openwrt" ]; then
            echo "❌ 错误：克隆源码失败 - openwrt目录不存在" | tee -a logs/summary.log
            exit 1
          fi
          
          cd openwrt
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "✅ 源码克隆成功，提交: ${COMMIT_HASH:0:7}" | tee -a logs/summary.log
          echo "" >> logs/summary.log
          cd ..
          
      - name: 更新feeds
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          
          echo "🔄 更新feeds..." | tee -a logs/summary.log
          cd openwrt
          
          echo "=== Feeds更新开始 ===" >> ../logs/technical.log
          ./scripts/feeds update -a 2>&1 | tee -a ../logs/technical.log
          ./scripts/feeds install -a 2>&1 | tee -a ../logs/technical.log
          echo "=== Feeds更新完成 ===" >> ../logs/technical.log
          
          echo "✅ Feeds更新完成" | tee -a ../logs/summary.log
          echo "" >> logs/summary.log
          
      - name: 安装依赖
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          
          echo "🔄 安装编译依赖..." | tee -a logs/summary.log
          cd openwrt
          
          echo "=== 依赖安装开始 ===" >> ../logs/technical.log
          sudo apt-get update 2>&1 | tee -a ../logs/technical.log
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-setuptools rsync unzip zlib1g-dev file wget 2>&1 | tee -a ../logs/technical.log
          echo "=== 依赖安装完成 ===" >> ../logs/technical.log
          
          echo "✅ 编译依赖安装完成" | tee -a ../logs/summary.log
          echo "" >> logs/summary.log
          
      - name: 编译固件
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          touch logs/progress.log
          
          echo "🔄 开始编译固件..." | tee -a logs/summary.log
          cd openwrt
          
          # 应用配置
          cp ../temp_config/.config .config
          make defconfig 2>&1 | tee -a ../logs/technical.log
          
          # 启用ccache
          export CCACHE_DIR=~/.ccache
          export USE_CCACHE=1
          export CCACHE_COMPRESS=1
          
          # 检查磁盘空间
          echo "磁盘空间:" >> ../logs/technical.log
          df -h >> ../logs/technical.log
          
          # 编译并过滤输出
          echo "=== 编译开始 ===" >> ../logs/technical.log
          make -j$(nproc) V=s 2>&1 | {
            while IFS= read -r line; do
              # 记录所有输出到技术日志
              echo "$line" >> ../logs/technical.log
              
              # 提取关键信息到进度日志
              if echo "$line" | grep -E "(CC|CXX|LD|AR|INSTALL|Building|Compiling|make\[.*\]:)"; then
                echo "$(date '+%H:%M:%S') - $line" >> ../logs/progress.log
              fi
              
              # 检查错误
              if echo "$line" | grep -i "error\|failed\|undefined\|cannot"; then
                echo "❌ 错误: $line" | tee -a ../logs/summary.log
              fi
            done
          }
          
          # 检查编译结果
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "❌ 多线程编译失败，尝试单线程..." | tee -a ../logs/summary.log
            make -j1 V=sc 2>&1 | tee -a ../logs/technical.log
            
            if [ $? -ne 0 ]; then
              echo "❌ 编译失败" | tee -a ../logs/summary.log
              
              # 提取关键错误信息
              echo "" >> logs/summary.log
              echo "=== 错误摘要 ===" >> logs/summary.log
              tail -n 100 ../logs/technical.log | grep -i "error\|failed\|undefined\|cannot" | tail -n 10 >> logs/summary.log
              echo "===============" >> logs/summary.log
              
              exit 1
            fi
          fi
          
          echo "✅ 编译成功" | tee -a ../logs/summary.log
          echo "" >> logs/summary.log
          
      - name: 上传进度日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ matrix.config_type }}-progress
          path: |
            logs/progress.log
          retention-days: 3
          if-no-files-found: warn
          
      - name: 收集产物
        if: always()
        run: |
          set -e
          # 确保日志文件存在
          mkdir -p logs
          touch logs/summary.log
          touch logs/technical.log
          
          echo "🔄 收集构建产物..." | tee -a logs/summary.log
          
          ARTIFACT_DIR="${{ env.REPO_SHORT }}-${{ matrix.config_type }}"
          FIRMWARE_DIR="${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware"
          mkdir -p "$ARTIFACT_DIR"
          mkdir -p "$FIRMWARE_DIR"
          
          TARGET_DIR="openwrt/bin/targets/${{ env.CHIP }}"
          
          # 复制配置文件
          cp temp_config/.config "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.config"
          
          # 复制其他文件
          if [ -f "openwrt/.config.buildinfo" ]; then
            cp openwrt/.config.buildinfo "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.config.buildinfo"
          fi
          
          if [ -d "$TARGET_DIR" ] && [ -f "$TARGET_DIR"/*.manifest ]; then
            cp "$TARGET_DIR"/*.manifest "$ARTIFACT_DIR/${{ env.REPO_SHORT }}-${{ matrix.config_type }}.manifest"
          fi
          
          # 处理固件文件
          if [ -d "$TARGET_DIR" ]; then
            FOUND_FIRMWARE=0
            for file in "$TARGET_DIR"/*.bin; do
              if [ -f "$file" ] && [[ "$file" == *"-squashfs-"* ]]; then
                FOUND_FIRMWARE=1
                DEVICE_NAME_FROM_FILE=$(basename "$file" | sed -n 's/^.*-\(.*\)-squashfs-.*\.bin$/\1/p')
                
                if [ -n "$DEVICE_NAME_FROM_FILE" ]; then
                  if [[ "$file" == *"factory"* ]]; then
                    FIRMWARE_TYPE="factory"
                  elif [[ "$file" == *"sysupgrade"* ]]; then
                    FIRMWARE_TYPE="sysupgrade"
                  else
                    continue
                  fi
                  
                  NEW_NAME="${{ env.REPO_SHORT }}-${DEVICE_NAME_FROM_FILE}-${FIRMWARE_TYPE}-${{ matrix.config_type }}.bin"
                  cp "$file" "$FIRMWARE_DIR/$NEW_NAME"
                  echo "  - $DEVICE_NAME_FROM_FILE ($FIRMWARE_TYPE)" >> logs/summary.log
                fi
              fi
            done
            
            if [ "$FOUND_FIRMWARE" -eq 0 ]; then
              echo "⚠️ 警告: 未找到符合条件的固件" | tee -a logs/summary.log
            else
              echo "✅ 成功处理 $FOUND_FIRMWARE 个固件文件" | tee -a logs/summary.log
            fi
          fi
          
          # 复制日志文件
          cp logs/summary.log "$ARTIFACT_DIR/summary.log"
          cp logs/technical.log "$ARTIFACT_DIR/technical.log"
          
          echo "✅ 产物收集完成" | tee -a logs/summary.log
          echo "" >> logs/summary.log
          
      - name: 上传产物
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ matrix.config_type }}
          path: |
            ${{ env.REPO_SHORT }}-${{ matrix.config_type }}/
          retention-days: 7
          if-no-files-found: warn
          
      - name: 上传固件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware
          path: |
            ${{ env.REPO_SHORT }}-${{ matrix.config_type }}-firmware/
          retention-days: 7
          if-no-files-found: warn

  # 打包并发布Release
  package-and-release:
    needs: build
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/
          
      - name: 准备发布目录
        run: |
          set -e
          mkdir -p release/{config,log,firmware,assets}
          
          # 收集配置文件
          find all-artifacts -name "*.config" -exec cp {} release/config/ \;
          find all-artifacts -name "*.config.buildinfo" -exec cp {} release/config/ \;
          find all-artifacts -name "*.manifest" -exec cp {} release/config/ \;
          
          # 收集日志文件
          find all-artifacts -name "summary.log" -exec cp {} release/log/ \;
          find all-artifacts -name "technical.log" -exec cp {} release/log/ \;
          
          # 收集固件文件
          find all-artifacts -name "*.bin" -exec cp {} release/firmware/ \;
          
          # 提取信息
          KERNEL_VERSION=""
          DEVICE_LIST=""
          
          for config_file in release/config/*.config; do
            KERNEL_VER=$(grep "^CONFIG_LINUX_KERNEL_VERSION=" "$config_file" | cut -d'"' -f2)
            if [ -n "$KERNEL_VER" ]; then
              KERNEL_VERSION="$KERNEL_VER"
              break
            fi
          done
          
          if [ -d release/firmware ]; then
            DEVICE_LIST=$(ls release/firmware/*.bin | sed -n 's/.*-\([^-]*\)-.*\.bin/\1/p' | sort | uniq | tr '\n' ' ')
          fi
          
          # 创建用户友好的发布说明
          cat > release/README.md << EOF
          # IPQ60xx 固件发布
          
          ## 基本信息
          - **发布日期**: $(date +%Y-%m-%d)
          - **内核版本**: $KERNEL_VERSION
          - **支持设备**: $DEVICE_LIST
          - **作者**: ${{ env.AUTHOR }}
          
          ## 默认设置
          - **管理地址**: ${{ env.DEFAULT_IP }}
          - **用户名**: ${{ env.DEFAULT_USER }}
          - **密码**: ${{ env.DEFAULT_PASS }}
          - **WiFi密码**: ${{ env.DEFAULT_WIFI }}
          
          ## 下载说明
          1. 从下面的附件中下载对应设备的固件文件
          2. 固件文件命名规则: \`仓库-设备-类型-配置.bin\`
          3. 支持的固件类型:
             - \`factory\`: 刷机固件（适用于首次刷机）
             - \`sysupgrade\`: 升级固件（适用于系统内升级）
          
          ## 使用说明
          1. 确保选择正确的设备型号
          2. 刷机前请备份重要数据
          3. 首次刷机使用 factory 固件
          4. 系统内升级使用 sysupgrade 固件
          
          ## 技术信息
          - 完整编译日志: 请下载 \`technical.log\` 文件
          - 编译摘要: 请下载 \`summary.log\` 文件
          
          ## 注意事项
          - 刷机有风险，请谨慎操作
          - 如遇问题，请查看技术日志文件
          EOF
          
          # 打包文件
          tar -czf release/${{ env.CHIP }}-config.tar.gz -C release/config .
          tar -czf release/${{ env.CHIP }}-log.tar.gz -C release/log .
          
          # 复制到assets目录
          cp release/${{ env.CHIP }}-config.tar.gz release/assets/
          cp release/${{ env.CHIP }}-log.tar.gz release/assets/
          cp release/firmware/*.bin release/assets/ 2>/dev/null || true
          
      - name: 创建Release并上传文件
        uses: softprops/action-gh-release@v1
        if: always()
        with:
          tag_name: $(date +%Y%m%d)-${{ env.CHIP }}
          name: ${{ env.CHIP }} Release $(date +%Y%m%d)
          body_path: release/README.md
          files: |
            release/assets/*
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
