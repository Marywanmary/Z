name: LibWrt Build All

on:
  schedule:
    - cron: '0 16 * * 4' # 北京时间周五0点 (UTC+8 = UTC-8)
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: 'Ubuntu版本'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options:
        - ubuntu-22.04
        - ubuntu-24.04

jobs:
  # 调用核心构建工作流 - Pro配置
  build-pro:
    uses: ./.github/workflows/core-build.yml
    with:
      repo_url: https://github.com/laipeng668/openwrt-6.x.git
      repo_branch: k6.12-nss
      repo_short: libwrt
      soc_name: ipq60xx
      config_profile: Pro
      ubuntu_version: ${{ github.event.inputs.ubuntu_version || 'ubuntu-22.04' }}
      manual_trigger: ${{ github.event_name == 'workflow_dispatch' }}

  # 调用核心构建工作流 - Max配置
  build-max:
    uses: ./.github/workflows/core-build.yml
    with:
      repo_url: https://github.com/laipeng668/openwrt-6.x.git
      repo_branch: k6.12-nss
      repo_short: libwrt
      soc_name: ipq60xx
      config_profile: Max
      ubuntu_version: ${{ github.event.inputs.ubuntu_version || 'ubuntu-22.04' }}
      manual_trigger: ${{ github.event_name == 'workflow_dispatch' }}

  # 调用核心构建工作流 - Ultra配置
  build-ultra:
    uses: ./.github/workflows/core-build.yml
    with:
      repo_url: https://github.com/laipeng668/openwrt-6.x.git
      repo_branch: k6.12-nss
      repo_short: libwrt
      soc_name: ipq60xx
      config_profile: Ultra
      ubuntu_version: ${{ github.event.inputs.ubuntu_version || 'ubuntu-22.04' }}
      manual_trigger: ${{ github.event_name == 'workflow_dispatch' }}

  # 发布阶段 - Pro配置
  release-pro:
    needs: build-pro
    uses: ./.github/workflows/core-release.yml
    with:
      repo_short: libwrt
      soc_name: ipq60xx
      config_profile: Pro
      build_success: ${{ needs.build-pro.outputs.build_success }}
      kernel_version: ${{ needs.build-pro.outputs.kernel_version }}
      devices: ${{ needs.build-pro.outputs.devices }}
      luci_packages: ${{ needs.build-pro.outputs.luci_packages }}
      artifacts_hash: ${{ needs.build-pro.outputs.artifacts_hash }}
      manual_trigger: ${{ github.event_name == 'workflow_dispatch' }}

  # 发布阶段 - Max配置
  release-max:
    needs: build-max
    uses: ./.github/workflows/core-release.yml
    with:
      repo_short: libwrt
      soc_name: ipq60xx
      config_profile: Max
      build_success: ${{ needs.build-max.outputs.build_success }}
      kernel_version: ${{ needs.build-max.outputs.kernel_version }}
      devices: ${{ needs.build-max.outputs.devices }}
      luci_packages: ${{ needs.build-max.outputs.luci_packages }}
      artifacts_hash: ${{ needs.build-max.outputs.artifacts_hash }}
      manual_trigger: ${{ github.event_name == 'workflow_dispatch' }}

  # 发布阶段 - Ultra配置
  release-ultra:
    needs: build-ultra
    uses: ./.github/workflows/core-release.yml
    with:
      repo_short: libwrt
      soc_name: ipq60xx
      config_profile: Ultra
      build_success: ${{ needs.build-ultra.outputs.build_success }}
      kernel_version: ${{ needs.build-ultra.outputs.kernel_version }}
      devices: ${{ needs.build-ultra.outputs.devices }}
      luci_packages: ${{ needs.build-ultra.outputs.luci_packages }}
      artifacts_hash: ${{ needs.build-ultra.outputs.artifacts_hash }}
      manual_trigger: ${{ github.event_name == 'workflow_dispatch' }}

  # 汇总结果
  summary:
    needs: [build-pro, build-max, build-ultra]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 构建汇总
        run: |
          echo -e "\033[36m📊 LibWrt 构建汇总\033[0m"
          echo -e "\033[36m===================\033[0m"
          echo -e "Pro配置构建状态: ${{ needs.build-pro.result }}"
          echo -e "Max配置构建状态: ${{ needs.build-max.result }}"
          echo -e "Ultra配置构建状态: ${{ needs.build-ultra.result }}"
          echo -e "\033[36m===================\033[0m"
          
          if [[ "${{ needs.build-pro.result }}" == "success" && "${{ needs.build-max.result }}" == "success" && "${{ needs.build-ultra.result }}" == "success" ]]; then
            echo -e "\033[32m✅ 所有配置构建成功！\033[0m"
          else
            echo -e "\033[31m❌ 部分配置构建失败！\033[0m"
            exit 1
          fi
