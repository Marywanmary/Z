name: IPQ-QW

on:
  schedule:
    # 每周五北京时间0点触发
    - cron: '0 16 * * 5'
  workflow_dispatch:

env:
  # 设置时区为中国标准时间
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 按照配置顺序：Ultra -> Max -> Pro
        # 所有分支的Ultra配置先执行，然后是所有分支的Max配置，最后是所有分支的Pro配置
        config:
          - { name: "Ultra", file: "Ultra.config" }
          - { name: "Max", file: "Max.config" }
          - { name: "Pro", file: "Pro.config" }
        repo:
          - { name: "immortalwrt", url: "https://github.com/laipeng668/immortalwrt.git", branch: "master", short: "immwrt" }
          - { name: "openwrt", url: "https://github.com/laipeng668/openwrt.git", branch: "master", short: "openwrt" }
          - { name: "libwrt", url: "https://github.com/laipeng668/openwrt-6.x.git", branch: "k6.12-nss", short: "libwrt" }
        # 架构配置
        arch:
          - { name: "ipq60xx", chip: "ipq60xx" }
        # 注意：这里预留了后续添加其他架构的支持，如ipq80xx、mtk等
        # - { name: "ipq80xx", chip: "ipq80xx" }
        # - { name: "mtk", chip: "mtk" }
      # 限制并行运行数量为6
      max-parallel: 6

    steps:
      # 清理磁盘空间
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          # 清理超过 1GB 的文件
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true

      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 设置环境变量
      - name: 设置环境变量
        run: |
          echo "REPO_NAME=${{ matrix.repo.name }}" >> $GITHUB_ENV
          echo "REPO_URL=${{ matrix.repo.url }}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${{ matrix.repo.branch }}" >> $GITHUB_ENV
          echo "REPO_SHORT=${{ matrix.repo.short }}" >> $GITHUB_ENV
          echo "CONFIG_NAME=${{ matrix.config.name }}" >> $GITHUB_ENV
          echo "CONFIG_FILE=${{ matrix.config.file }}" >> $GITHUB_ENV
          echo "ARCH_NAME=${{ matrix.arch.name }}" >> $GITHUB_ENV
          echo "CHIP_NAME=${{ matrix.arch.chip }}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +%H:%M:%S)" >> $GITHUB_ENV

      # 初始化环境 - 安装必要依赖
      - name: 初始化环境 (Ubuntu 22.04)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -y update
          # 安装编译OpenWrt所需的基础依赖（修复了包安装语法）
          sudo -E apt-get -y install \
            build-essential \
            libncurses5-dev \
            zlib1g-dev \
            gawk \
            gcc-multilib \
            flex \
            git-core \
            gettext \
            libssl-dev \
            xsltproc \
            rsync \
            unzip \
            wget \
            curl \
            libelf-dev \
            libudev-dev \
            libpci-dev \
            libiberty-dev \
            libreadline-dev \
            libncurses-dev \
            libxml2-dev \
            libxslt1-dev \
            libgmp-dev \
            libmpfr-dev \
            libmpc-dev \
            libisl-dev \
            libpam-dev \
            libgpiod-dev \
            libpam0g-dev \
            libgpiod2 \
            libpam-modules \
            libpam-modules-bin \
            libpam-runtime \
            libpam-systemd \
            libselinux1-dev \
            libsepol-dev \
            libcap-ng-dev \
            libattr1-dev \
            libacl1-dev \
            libblkid-dev \
            libmount-dev \
            libsmartcols-dev \
            libuuid-dev \
            libudev-dev \
            libsystemd-dev \
            libglib2.0-dev \
            libgobject-2.0-dev \
            libgthread-2.0-dev \
            libgmodule-2.0-dev \
            libglib-2.0-dev-bin \
            ncurses-term \
            python3 \
            python3-dev \
            python3-pip \
            python3-setuptools \
            python3-wheel
          
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"
          echo "Ubuntu 22.04 环境初始化完成"

      # L1: 工具链 - 全分支共享，编译一次复用
      - name: 缓存工具链 (L1)
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt-source/staging_dir/toolchain-*
            openwrt-source/staging_dir/target-*
          key: toolchain-${{ matrix.arch.chip }}
          restore-keys: |
            toolchain-${{ matrix.arch.chip }}

      # L2: 内核 - 分支内共享
      - name: 缓存内核 (L2)
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: |
            openwrt-source/kernel-*
            openwrt-source/target/linux/*
          key: kernel-${{ matrix.repo.short }}-${{ matrix.arch.chip }}
          restore-keys: |
            kernel-${{ matrix.repo.short }}-${{ matrix.arch.chip }}

      # L3: 依赖包 - 分支内共享，支持增量更新，基础系统前置条件
      - name: 缓存依赖包 (L3)
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            openwrt-source/packages/*
            openwrt-source/feed/*
          key: deps-${{ matrix.repo.short }}-${{ matrix.arch.chip }}
          restore-keys: |
            deps-${{ matrix.repo.short }}-${{ matrix.arch.chip }}

      # L4: 基础系统 - 分支内共享，依赖内核头文件
      - name: 缓存基础系统 (L4)
        id: cache-base
        uses: actions/cache@v4
        with:
          path: |
            openwrt-source/target/*
            openwrt-source/bin/packages/*
          key: base-${{ matrix.repo.short }}-${{ matrix.arch.chip }}
          restore-keys: |
            base-${{ matrix.repo.short }}-${{ matrix.arch.chip }}

      # L5: 软件包 - 全分支共享，支持并行
      - name: 缓存软件包 (L5)
        id: cache-pkgs
        uses: actions/cache@v4
        with:
          path: |
            openwrt-source/bin/packages/*
          key: pkgs-${{ matrix.arch.chip }}
          restore-keys: |
            pkgs-${{ matrix.arch.chip }}

      # 克隆OpenWrt源码
      - name: 克隆OpenWrt源码
        run: |
          echo "正在从 ${{ env.REPO_URL }} 克隆 ${{ env.REPO_NAME }} 分支 ${{ env.REPO_BRANCH }}"
          git clone --depth=1 -b ${{ env.REPO_BRANCH }} ${{ env.REPO_URL }} openwrt-source
          cd openwrt-source
          echo "源码克隆成功"
          pwd

      # 配置OpenWrt
      - name: 配置OpenWrt
        run: |
          cd openwrt-source
          
          # 创建配置文件
          echo "正在创建配置文件..."
          cat ../configs/ipq60xx_base.config > .config
          cat ../configs/${{ env.REPO_SHORT }}_base.config >> .config
          cat ../configs/${{ env.CONFIG_FILE }} >> .config
          
          # 添加设备信息
          echo "CONFIG_TARGET_DEVICE_QUALCOMMAX_IPQ60XX_DEVICE_JDCLOUD_RE_SS_01=y" >> .config
          echo "CONFIG_TARGET_DEVICE_QUALCOMMAX_IPQ60XX_DEVICE_JDCLOUD_RE_CS_02=y" >> .config
          
          # 修改默认IP和密码
          sed -i 's/192.168.1.1/192.168.111.1/g' package/base-files/files/bin/config_generate
          sed -i "s/hostname='.*'/hostname='WRT'/g" package/base-files/files/bin/config_generate
          
          # 修改管理员密码和无线密码为空
          sed -i '/DEFAULT_PASSWORD=/s/=.*/=""/' package/base-files/files/bin/config_generate
          sed -i '/DEFAULT_WIFI_PASSWORD=/s/=.*/=""/' package/base-files/files/bin/config_generate
          
          echo "配置完成"

      # L1: 工具链编译 (全分支共享)
      - name: 编译工具链 (L1)
        if: github.run_number == 1 || github.event_name == 'workflow_dispatch' || steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          cd openwrt-source
          echo "正在编译工具链..."
          # 修复终端问题
          export TERM=xterm
          make toolchain/compile -j$(nproc) || { echo "工具链编译失败"; exit 1; }
          echo "工具链编译成功"

      # L2: 内核编译 (分支内共享)
      - name: 编译内核 (L2)
        if: steps.cache-toolchain.outputs.cache-hit != 'true' || steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          cd openwrt-source
          echo "正在编译内核..."
          # 修复终端问题
          export TERM=xterm
          make kernel/compile -j$(nproc) || { echo "内核编译失败"; exit 1; }
          echo "内核编译成功"

      # L3: 依赖包编译 (分支内共享)
      - name: 编译依赖包 (L3)
        if: steps.cache-toolchain.outputs.cache-hit != 'true' && steps.cache-kernel.outputs.cache-hit != 'true' || steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          cd openwrt-source
          echo "正在编译依赖包..."
          # 修复终端问题
          export TERM=xterm
          make package/compile -j$(nproc) || { echo "依赖包编译失败"; exit 1; }
          echo "依赖包编译成功"

      # L4: 基础系统编译 (分支内共享)
      - name: 编译基础系统 (L4)
        if: steps.cache-toolchain.outputs.cache-hit != 'true' && steps.cache-kernel.outputs.cache-hit != 'true' && steps.cache-deps.outputs.cache-hit != 'true' || steps.cache-base.outputs.cache-hit != 'true'
        run: |
          cd openwrt-source
          echo "正在编译基础系统..."
          # 修复终端问题
          export TERM=xterm
          make target/compile -j$(nproc) || { echo "基础系统编译失败"; exit 1; }
          echo "基础系统编译成功"

      # L5: 软件包编译 (全分支共享)
      - name: 编译软件包 (L5)
        if: steps.cache-toolchain.outputs.cache-hit != 'true' && steps.cache-kernel.outputs.cache-hit != 'true' && steps.cache-deps.outputs.cache-hit != 'true' && steps.cache-base.outputs.cache-hit != 'true' || steps.cache-pkgs.outputs.cache-hit != 'true'
        run: |
          cd openwrt-source
          echo "正在编译软件包..."
          # 修复终端问题
          export TERM=xterm
          make package/index
          make package/compile -j$(nproc) || { echo "软件包编译失败"; exit 1; }
          echo "软件包编译成功"

      # 整合固件
      - name: 整合固件
        run: |
          cd openwrt-source
          echo "正在生成固件..."
          # 修复终端问题
          export TERM=xterm
          make -j$(nproc) || { echo "固件生成失败"; exit 1; }
          echo "固件生成成功"

      # 复制和重命名产物
      - name: 处理产物
        run: |
          cd openwrt-source
          
          # 创建产物目录
          mkdir -p ../artifacts/${{ env.CHIP_NAME }}
          
          # 复制固件
          find bin/targets/* -name "*.bin" -type f | while read file; do
            filename=$(basename "$file")
            device_name=$(echo "$filename" | sed -E 's/.*_(.*)\.bin/\1/')
            # 根据固件类型重命名
            if [[ "$filename" == *"factory"* ]]; then
              new_name="${{ env.REPO_SHORT }}-${device_name}-factory-${{ env.CONFIG_NAME }}.bin"
            else
              new_name="${{ env.REPO_SHORT }}-${device_name}-sysupgrade-${{ env.CONFIG_NAME }}.bin"
            fi
            cp "$file" "../artifacts/${{ env.CHIP_NAME }}/$new_name"
          done
          
          # 复制.config文件
          cp .config "../artifacts/${{ env.CHIP_NAME }}/${{ env.REPO_SHORT }}-${{ env.CHIP_NAME }}-config-${{ env.CONFIG_NAME }}.config"
          
          # 复制.manifest文件
          find bin/targets/* -name "*.manifest" -type f | while read file; do
            cp "$file" "../artifacts/${{ env.CHIP_NAME }}/${{ env.REPO_SHORT }}-${{ env.CHIP_NAME }}-config-${{ env.CONFIG_NAME }}.manifest"
          done
          
          # 复制.config.buildinfo文件
          find bin/targets/* -name "*.config.buildinfo" -type f | while read file; do
            cp "$file" "../artifacts/${{ env.CHIP_NAME }}/${{ env.REPO_SHORT }}-${{ env.CHIP_NAME }}-config-${{ env.CONFIG_NAME }}.config.buildinfo"
          done
          
          # 复制日志文件
          mkdir -p "../artifacts/${{ env.CHIP_NAME }}/logs"
          find . -name "*.log" -type f | head -10 | while read log_file; do
            cp "$log_file" "../artifacts/${{ env.CHIP_NAME }}/logs/"
          done
          
          # 复制软件包
          mkdir -p "../artifacts/${{ env.CHIP_NAME }}/packages"
          find bin/packages/* -name "*.ipk" -type f | while read pkg; do
            cp "$pkg" "../artifacts/${{ env.CHIP_NAME }}/packages/"
          done
          
          echo "产物处理完成"

      # 保存缓存 - L1: 工具链 (全分支共享)
      - name: 保存工具链缓存 (L1)
        if: steps.cache-toolchain.outputs.cache-hit != 'true' && (github.run_number == 1 || github.event_name == 'workflow_dispatch')
        uses: actions/cache/save@v4
        with:
          path: |
            openwrt-source/staging_dir/toolchain-*
            openwrt-source/staging_dir/target-*
          key: toolchain-${{ matrix.arch.chip }}

      # 保存缓存 - L2: 内核 (分支内共享)
      - name: 保存内核缓存 (L2)
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            openwrt-source/kernel-*
            openwrt-source/target/linux/*
          key: kernel-${{ matrix.repo.short }}-${{ matrix.arch.chip }}

      # 保存缓存 - L3: 依赖包 (分支内共享)
      - name: 保存依赖包缓存 (L3)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            openwrt-source/packages/*
            openwrt-source/feed/*
          key: deps-${{ matrix.repo.short }}-${{ matrix.arch.chip }}

      # 保存缓存 - L4: 基础系统 (分支内共享)
      - name: 保存基础系统缓存 (L4)
        if: steps.cache-base.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            openwrt-source/target/*
            openwrt-source/bin/packages/*
          key: base-${{ matrix.repo.short }}-${{ matrix.arch.chip }}

      # 保存缓存 - L5: 软件包 (全分支共享)
      - name: 保存软件包缓存 (L5)
        if: steps.cache-pkgs.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            openwrt-source/bin/packages/*
          key: pkgs-${{ matrix.arch.chip }}

      # 上传产物到GitHub Release
      - name: 上传产物到Release
        if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 16 * * 5'
        run: |
          cd artifacts
          
          # 打包配置文件
          tar -czf "${{ env.CHIP_NAME }}-config.tar.gz" "${{ env.CHIP_NAME }}/*.config" "${{ env.CHIP_NAME }}/*.manifest" "${{ env.CHIP_NAME }}/*.config.buildinfo"
          
          # 打包日志文件
          tar -czf "${{ env.CHIP_NAME }}-log.tar.gz" "${{ env.CHIP_NAME }}/logs"
          
          # 打包软件包
          tar -czf "${{ env.CHIP_NAME }}-app.tar.gz" "${{ env.CHIP_NAME }}/packages"
          
          echo "所有产物打包完成"

      # 发布到Release
      - name: 发布到Release
        if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 16 * * 5'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.BUILD_DATE }}-${{ env.CHIP_NAME }}
          name: Build ${{ env.BUILD_DATE }} for ${{ env.CHIP_NAME }}
          body: |
            ## Build Information
            
            **默认管理地址:** 192.168.111.1
            **默认用户:** root
            **默认密码:** none
            **默认WiFi密码:** 12345678
            
            **设备:** 京东云亚瑟、雅典娜
            **内核版本:** $(cd openwrt-source && grep "CONFIG_KERNEL_VERSION" .config | cut -d '=' -f2)
            **作者:** Mary
            **发布时间:** ${{ env.BUILD_DATE }}
            **编译时间:** ${{ env.BUILD_TIME }}
            
            **编译的LuCI应用列表:**
            $(cd openwrt-source && ls bin/packages/*/base/luci-app-* 2>/dev/null | sed 's/.*luci-app-//' | sort | tr '\n' ',' | sed 's/,$//')
            
            ### 固件文件
            - 配置文件: ${{ env.CHIP_NAME }}-config.tar.gz
            - 日志: ${{ env.CHIP_NAME }}-log.tar.gz
            - 应用程序: ${{ env.CHIP_NAME }}-app.tar.gz
          files: |
            artifacts/${{ env.CHIP_NAME }}-config.tar.gz
            artifacts/${{ env.CHIP_NAME }}-log.tar.gz
            artifacts/${{ env.CHIP_NAME }}-app.tar.gz
          draft: false
          prerelease: false
